dnl Process this file with autoconf to produce a configure script.

dnl TODO:
dnl - figure out how to use EO and NOMAD in-place (i.e. without having to install them) 
dnl

dnl AC_INIT (package, version, [bug-report-email], [tarname])
AC_INIT([neurofitter],[0.9.3])

dnl check for this file's existence to make sure that the directory
dnl specified by --srcdir is the right one
AC_CONFIG_SRCDIR([README])

dnl Specify a header configuration file
AM_CONFIG_HEADER(neurofitter_config.h)

dnl Compute the canonical host-system type variable, host, and its
dnl three individual parts host_cpu, host_vendor, and host_os.
AC_CANONICAL_SYSTEM

dnl Initialize Automake
AM_INIT_AUTOMAKE

dnl Use ICC to build?
AC_ARG_WITH(icc, [  --with-icc              build with Intel's C compiler],[CC="icc"; CXX="icc"; CFLAGS="-Os -Zp2"])

dnl Search for C and C++ compilers starting with the specified list
AC_PROG_CC
AC_PROG_CXX
AC_LANG([C++])
ACX_MPI(neurofitter_have_mpi=yes)

AC_DEFINE([HAVE_PKG_eo], 0, [Define if package EO is used.])
AC_DEFINE([HAVE_PKG_nomad], 0, [Define if package NOMAD is used.])

local_ac_pwd=`pwd`

AC_ARG_WITH([eo], 
	    [  --with-eo           build and use the bundled EO library], 
	    [if test "$withval" == "yes" -o "$withval" == "";
 	     then
		neurofitter_eo_src=yes
		neurofitter_have_eo=yes
		AC_DEFINE(HAVE_PKG_eo,1)
	        eo_libdir="$local_ac_pwd/EO/src"
		eo_include="$local_ac_pwd/EO/src"
		eo_src_CFLAGS="-I$eo_include -I$local_ac_pwd/EO"
		eo_src_LDFLAGS="-L$eo_libdir -L$eo_libdir/es -L$eo_libdir/ga -L$eo_libdir/utils"
		AC_SUBST(eo_src_CFLAGS)
		AC_SUBST(eo_src_LDFLAGS)
	     fi])
AM_CONDITIONAL(BUILD_EO_SRC, test "$neurofitter_eo_src" = "yes")
if test "$neurofitter_eo_src" == "yes" ;
then
	AC_CONFIG_SUBDIRS([EO])
else
	AC_caolan_SEARCH_PACKAGE(eo, _ZTI14eoFunctorStore, [es eoutils eo], [eo/es/make_es.h], neurofitter_have_eo=yes)
fi

#  AC_caolan_SEARCH_PACKAGE(PACKAGE, FUNCTION, LIBRARY LIST,
#  HEADERFILE [, ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]])


AC_ARG_WITH([nomad], 
	    [  --with-nomad           build and use the bundled NOMAD library], 
	    [if test "$withval" == "yes" -o "$withval" == "";
 	     then
		neurofitter_nomad_src=yes
		neurofitter_have_nomad=yes
		AC_DEFINE(HAVE_PKG_eo,1)
	        nomad_libdir="$local_ac_pwd/NOMAD"
		nomad_include="$local_ac_pwd/NOMAD"
		nomad_src_CFLAGS="-I$nomad_include"
		nomad_src_LDFLAGS="-L$nomad_libdir -lnomad"
		AC_SUBST(nomad_src_CFLAGS)
		AC_SUBST(nomad_src_LDFLAGS)
	     fi])
AM_CONDITIONAL(BUILD_NOMAD_SRC, test "$neurofitter_nomad_src" = "yes")
if test "$neurofitter_nomad_src" == "yes" ;
then
	AC_CONFIG_FILES([NOMAD/Makefile])
else
AC_ARG_WITH([nomad-ext], 
	    [  --with-nomad-ext[=DIR]        use an installed NOMAD library], 
	    [if test "$withval" != "";
 	     then
	      	OLD_LDFLAGS=$LDFLAGS
		OLD_CFLAGS=$CFLAGS
		OLD_CPPFLAGS=$CPPFLAGS
	      	LDFLAGS="$LDFLAGS -L$withval"
		CFLAGS="$CFLAGS -I$withval"
		CPPFLAGS="$CPPFLAGS -I$withval"
	     fi
	     success=no
	     AC_CHECK_HEADERS(nomad,success=yes)
	     if test "$success" == yes
	     then
		   neurofitter_have_nomad=yes
		   AC_DEFINE(HAVE_PKG_nomad,1)
		   if test "$withval" != "";
 	           then  
		     nomad_libdir="$withval"
		     nomad_include="$withval"
		     nomad_CFLAGS="-I$nomad_include"
		     nomad_LDFLAGS="-L$nomad_libdir -lnomad"
		   fi
		   AC_SUBST(nomad_CFLAGS)
		   AC_SUBST(nomad_LDFLAGS)
	     fi
	     if test "$withval" != ""
	     then
	     	LDFLAGS=$OLD_LDFLAGS
		CFLAGS=$OLD_CFLAGS
		CPPFLAGS=$OLD_CPPFLAGS
	     fi])
fi

AM_CONDITIONAL(USE_EO, test "$neurofitter_have_eo" = "yes")
AM_CONDITIONAL(USE_NOMAD, test "$neurofitter_have_nomad" = "yes")

AC_ARG_ENABLE([mpi], 
	    [  --enable-mpi            build MPI version of Neurofitter ], 
	    [if test "$neurofitter_have_mpi" == "yes" ;
	     then
	        neurofitter_use_mpi=yes
		CXX=$MPICXX
		LIBS="$MPILIBS $LIBS"
	     else
		AC_MSG_ERROR([mpic++ is required to build MPI Neurofitter])
             fi])
AM_CONDITIONAL(USE_MPI, test "$neurofitter_use_mpi" = "yes")


dnl Check for programs
AC_PROG_INSTALL
AM_PROG_LIBTOOL

dnl Check for GNU make.
AC_CHECK_PROGS(MAKE, [gmake make])
if test x"${MAKE}" = x
then
    AC_MSG_ERROR([cannot find a make utility])
else
    AC_MSG_CHECKING([whether ${MAKE} is GNU Make])
    if ${MAKE} --version 2>/dev/null | head -n 1 |
       grep "GNU Make" >/dev/null
    then
        AC_MSG_RESULT([yes])
    else
        AC_MSG_RESULT([no])
        AC_MSG_ERROR([GNU Make is required, but ${MAKE} is
                      different])
    fi
fi

DX_HTML_FEATURE(ON)
DX_PDF_FEATURE(ON)
DX_CHM_FEATURE(OFF)
DX_CHI_FEATURE(OFF)
DX_MAN_FEATURE(OFF)
DX_RTF_FEATURE(OFF)
DX_XML_FEATURE(OFF)
DX_PS_FEATURE(OFF)
DX_INIT_DOXYGEN(Neurofitter, doc/doxygen.config, doc)

dnl Check for libraries
AC_CHECK_LIB(m, log2, AC_DEFINE([HAVE_LOG2],[],[log2 function is present]))


dnl Search for the getopt function
AC_SEARCH_LIBS(getopt, [getopt], , AC_MSG_ERROR(getopt function not found))

dnl Check for the xml2 library
AM_PATH_XML2(2.3.0, , AC_MSG_ERROR(xml2 (>= 2.3.0) library not found))


dnl Check for header files
AC_STDC_HEADERS
AC_CHECK_HEADERS(sys/resource.h)
AC_CHECK_HEADERS(getopt.h)

dnl Check for typedefs, structures, C compiler characteristics
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl This is an example how to specify different CFLAGS depending on
dnl the C compiler detected: 

dnl If gcc is present, use -Wall
if test "x$GCC" = "xyes"; then
  if test -z "`echo "$CFLAGS" | grep "\-Wall" 2> /dev/null`" ; then
    CFLAGS="$CFLAGS -Wall"
  fi
fi


dnl If we're using gcc, try to find better CFLAGS than the default -g -O2.
AC_MSG_CHECKING([for better CFLAGS])
case "$CC" in
  *gcc*)
    WARNFLAGS="-Wall -Wno-unused"
    if test "$CFLAGS" = "-g -O2"; then
      if test x${mingw_system} = x1; then
         CFLAGS="-Os -fno-strict-aliasing $WARNFLAGS"
      else
         CFLAGS="-Os -fomit-frame-pointer -fno-strict-aliasing $WARNFLAGS"
      fi
    fi;;
  *)
esac


dnl Check for library functions
AC_CHECK_FUNCS(sysconf gettimeofday select)

dnl debug flag 
AC_ARG_ENABLE(debug,
  [  --enable-debug          turn on debugging (on by default)],
  [case "${enableval}" in
    "" | y | ye | yes) debug=true; 
		       CFLAGS=$(echo $CFLAGS -g | sed -e 's/-O\|-O2\|-O3//g') ; 
		       CXXFLAGS=$(echo $CXXFLAGS -g | sed -e 's/-O\|-O2\|-O3//g') ;;
    n | no) debug=false ;
            CFLAGS=$(echo $CFLAGS | sed -e 's/-g//g') ; 
            CXXFLAGS=$(echo $CXXFLAGS | sed -e 's/-g//g') ;;

    *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
  esac],
  [debug=true])
AM_CONDITIONAL(NEUROFITTER_DEBUG, test x$debug = xtrue)


dnl Create makefiles and other configuration files
AC_CONFIG_FILES([Makefile bin/Makefile tests/Makefile])

dnl Generate `config.status' and launch it
AC_OUTPUT

AC_MSG_NOTICE([

Neurofitter is now configured as follows:

  Source directory:     $local_ac_pwd
  Installation prefix:  $prefix
  C compiler:           $CC $XTRA_CFLAGS $WARN_CFLAGS $CFLAGS
  C++ compiler:         $CXX $XTRA_CXXFLAGS $WARN_CXXFLAGS $CXXFLAGS
  MPI compiler:         $MPICXX
  EO found:             $neurofitter_have_eo
  EO library dir:       $eo_libdir
  EO include dir:       $eo_include
  EO CFLAGS:            $eo_CFLAGS
  EO LDFLAGS:           $eo_LDFLAGS
  NOMAD found:          $neurofitter_have_nomad
  NOMAD library dir:    $nomad_libdir
  NOMAD include dir:    $nomad_include
  NOMAD CFLAGS:         $nomad_CFLAGS
  NOMAD LDFLAGS:        $nomad_LDFLAGS
])
