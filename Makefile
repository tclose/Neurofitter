# Makefile.in generated by automake 1.9.6 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




srcdir = .
top_srcdir = .

pkgdatadir = $(datadir)/neurofitter
pkglibdir = $(libdir)/neurofitter
pkgincludedir = $(includedir)/neurofitter
top_builddir = .
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
#am__append_1 = -W -g
#am__append_2 = -DDEBUG
am__append_3 = -O2
bin_PROGRAMS = neurofitter$(EXEEXT) $(am__EXEEXT_1)
#am__append_4 = "-Wno-deprecated -Wno-long-long -DWITH_EO " 
#am__append_5 = "-les -leoutils -leo " 
#am__append_6 = "-DWITH_NOMAD -DPARANOMAD " 
#am__append_7 = "-lnomad " 
DIST_COMMON = README $(am__configure_deps) $(noinst_HEADERS) \
	$(pkginclude_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/neurofitter_config.h.in \
	$(top_srcdir)/configure AUTHORS COPYING ChangeLog INSTALL NEWS \
	TODO compile config.guess config.sub depcomp install-sh \
	ltmain.sh missing
subdir = .
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ac_caolan_search_package.m4 \
	$(top_srcdir)/m4/acx_mpi.m4 \
	$(top_srcdir)/m4/ax_prog_doxygen.m4 \
	$(top_srcdir)/m4/libxml2.m4 $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno configure.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = neurofitter_config.h
CONFIG_CLEAN_FILES =
#am__EXEEXT_1 = mpineurofitter$(EXEEXT)
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkgincludedir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am__mpineurofitter_SOURCES_DIST = $(SRCDIR)/Neurofitter.cpp \
	$(SRCDIR)/DataTrace.cpp $(SRCDIR)/FixedParameters.cpp \
	$(SRCDIR)/NormalTracesReader.cpp $(SRCDIR)/XMLString.cpp \
	$(SRCDIR)/ModelResults.cpp $(SRCDIR)/GenesisModelInterface.cpp \
	$(SRCDIR)/NeuronModelInterface.cpp \
	$(SRCDIR)/ExecutableModelInterface.cpp \
	$(SRCDIR)/ModelTuningParameters.cpp \
	$(SRCDIR)/DirectVdVdtMatrix.cpp $(SRCDIR)/MapVdVdtMatrix.cpp \
	$(SRCDIR)/DistanceVdVdtMatrix.cpp \
	$(SRCDIR)/MatrixFitnessCalculator.cpp \
	$(SRCDIR)/FakeExperimentInterface.cpp \
	$(SRCDIR)/FileExperimentInterface.cpp \
	$(SRCDIR)/FileFitterInterface.cpp $(SRCDIR)/FitterResults.cpp \
	$(SRCDIR)/MeshFitterInterface.cpp \
	$(SRCDIR)/EasyFitterInterface.cpp \
	$(SRCDIR)/RandomFitterInterface.cpp \
	$(SRCDIR)/SwarmFitterInterface.cpp $(SRCDIR)/SwarmFly.cpp \
	$(SRCDIR)/EOFitterInterface.cpp \
	$(SRCDIR)/NOMADFitterInterface.cpp $(SRCDIR)/truthfunction.cpp \
	$(SRCDIR)/EONOMADFitterInterface.cpp \
	$(SRCDIR)/MPIModelInterface.cpp \
	$(SRCDIR)/MPIFitnessCalculator.cpp $(SRCDIR)/MPIStream.cpp
#am__objects_1 =  \
#	mpineurofitter-EOFitterInterface.$(OBJEXT)
#am__objects_2 =  \
#	mpineurofitter-NOMADFitterInterface.$(OBJEXT) \
#	mpineurofitter-truthfunction.$(OBJEXT)
##am__objects_3 = mpineurofitter-EONOMADFitterInterface.$(OBJEXT)
am__objects_4 = mpineurofitter-Neurofitter.$(OBJEXT) \
	mpineurofitter-DataTrace.$(OBJEXT) \
	mpineurofitter-FixedParameters.$(OBJEXT) \
	mpineurofitter-NormalTracesReader.$(OBJEXT) \
	mpineurofitter-XMLString.$(OBJEXT) \
	mpineurofitter-ModelResults.$(OBJEXT) \
	mpineurofitter-GenesisModelInterface.$(OBJEXT) \
	mpineurofitter-NeuronModelInterface.$(OBJEXT) \
	mpineurofitter-ExecutableModelInterface.$(OBJEXT) \
	mpineurofitter-ModelTuningParameters.$(OBJEXT) \
	mpineurofitter-DirectVdVdtMatrix.$(OBJEXT) \
	mpineurofitter-MapVdVdtMatrix.$(OBJEXT) \
	mpineurofitter-DistanceVdVdtMatrix.$(OBJEXT) \
	mpineurofitter-MatrixFitnessCalculator.$(OBJEXT) \
	mpineurofitter-FakeExperimentInterface.$(OBJEXT) \
	mpineurofitter-FileExperimentInterface.$(OBJEXT) \
	mpineurofitter-FileFitterInterface.$(OBJEXT) \
	mpineurofitter-FitterResults.$(OBJEXT) \
	mpineurofitter-MeshFitterInterface.$(OBJEXT) \
	mpineurofitter-EasyFitterInterface.$(OBJEXT) \
	mpineurofitter-RandomFitterInterface.$(OBJEXT) \
	mpineurofitter-SwarmFitterInterface.$(OBJEXT) \
	mpineurofitter-SwarmFly.$(OBJEXT) $(am__objects_1) \
	$(am__objects_2) $(am__objects_3)
am_mpineurofitter_OBJECTS = $(am__objects_4) \
	mpineurofitter-MPIModelInterface.$(OBJEXT) \
	mpineurofitter-MPIFitnessCalculator.$(OBJEXT) \
	mpineurofitter-MPIStream.$(OBJEXT)
mpineurofitter_OBJECTS = $(am_mpineurofitter_OBJECTS)
mpineurofitter_LDADD = $(LDADD)
am__neurofitter_SOURCES_DIST = $(SRCDIR)/Neurofitter.cpp \
	$(SRCDIR)/DataTrace.cpp $(SRCDIR)/FixedParameters.cpp \
	$(SRCDIR)/NormalTracesReader.cpp $(SRCDIR)/XMLString.cpp \
	$(SRCDIR)/ModelResults.cpp $(SRCDIR)/GenesisModelInterface.cpp \
	$(SRCDIR)/NeuronModelInterface.cpp \
	$(SRCDIR)/ExecutableModelInterface.cpp \
	$(SRCDIR)/ModelTuningParameters.cpp \
	$(SRCDIR)/DirectVdVdtMatrix.cpp $(SRCDIR)/MapVdVdtMatrix.cpp \
	$(SRCDIR)/DistanceVdVdtMatrix.cpp \
	$(SRCDIR)/MatrixFitnessCalculator.cpp \
	$(SRCDIR)/FakeExperimentInterface.cpp \
	$(SRCDIR)/FileExperimentInterface.cpp \
	$(SRCDIR)/FileFitterInterface.cpp $(SRCDIR)/FitterResults.cpp \
	$(SRCDIR)/MeshFitterInterface.cpp \
	$(SRCDIR)/EasyFitterInterface.cpp \
	$(SRCDIR)/RandomFitterInterface.cpp \
	$(SRCDIR)/SwarmFitterInterface.cpp $(SRCDIR)/SwarmFly.cpp \
	$(SRCDIR)/EOFitterInterface.cpp \
	$(SRCDIR)/NOMADFitterInterface.cpp $(SRCDIR)/truthfunction.cpp \
	$(SRCDIR)/EONOMADFitterInterface.cpp
#am__objects_5 = neurofitter-EOFitterInterface.$(OBJEXT)
#am__objects_6 =  \
#	neurofitter-NOMADFitterInterface.$(OBJEXT) \
#	neurofitter-truthfunction.$(OBJEXT)
##am__objects_7 = neurofitter-EONOMADFitterInterface.$(OBJEXT)
am_neurofitter_OBJECTS = neurofitter-Neurofitter.$(OBJEXT) \
	neurofitter-DataTrace.$(OBJEXT) \
	neurofitter-FixedParameters.$(OBJEXT) \
	neurofitter-NormalTracesReader.$(OBJEXT) \
	neurofitter-XMLString.$(OBJEXT) \
	neurofitter-ModelResults.$(OBJEXT) \
	neurofitter-GenesisModelInterface.$(OBJEXT) \
	neurofitter-NeuronModelInterface.$(OBJEXT) \
	neurofitter-ExecutableModelInterface.$(OBJEXT) \
	neurofitter-ModelTuningParameters.$(OBJEXT) \
	neurofitter-DirectVdVdtMatrix.$(OBJEXT) \
	neurofitter-MapVdVdtMatrix.$(OBJEXT) \
	neurofitter-DistanceVdVdtMatrix.$(OBJEXT) \
	neurofitter-MatrixFitnessCalculator.$(OBJEXT) \
	neurofitter-FakeExperimentInterface.$(OBJEXT) \
	neurofitter-FileExperimentInterface.$(OBJEXT) \
	neurofitter-FileFitterInterface.$(OBJEXT) \
	neurofitter-FitterResults.$(OBJEXT) \
	neurofitter-MeshFitterInterface.$(OBJEXT) \
	neurofitter-EasyFitterInterface.$(OBJEXT) \
	neurofitter-RandomFitterInterface.$(OBJEXT) \
	neurofitter-SwarmFitterInterface.$(OBJEXT) \
	neurofitter-SwarmFly.$(OBJEXT) $(am__objects_5) \
	$(am__objects_6) $(am__objects_7)
neurofitter_OBJECTS = $(am_neurofitter_OBJECTS)
neurofitter_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(mpineurofitter_SOURCES) $(neurofitter_SOURCES)
DIST_SOURCES = $(am__mpineurofitter_SOURCES_DIST) \
	$(am__neurofitter_SOURCES_DIST)
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
pkgincludeHEADERS_INSTALL = $(INSTALL_HEADER)
HEADERS = $(noinst_HEADERS) $(pkginclude_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d $(distdir) \
    || { find $(distdir) -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr $(distdir); }; }
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = ${SHELL} /home/igr/src/Neurofitter/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/igr/src/Neurofitter/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/igr/src/Neurofitter/missing --run autoconf
AUTOHEADER = ${SHELL} /home/igr/src/Neurofitter/missing --run autoheader
AUTOMAKE = ${SHELL} /home/igr/src/Neurofitter/missing --run automake-1.9
AWK = gawk
BUILD_EO_SRC_FALSE = 
BUILD_EO_SRC_TRUE = #
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -Wall
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DOXYGEN_PAPER_SIZE = 
DX_COND_chi_FALSE = 
DX_COND_chi_TRUE = #
DX_COND_chm_FALSE = 
DX_COND_chm_TRUE = #
DX_COND_doc_FALSE = #
DX_COND_doc_TRUE = 
DX_COND_dot_FALSE = #
DX_COND_dot_TRUE = 
DX_COND_html_FALSE = #
DX_COND_html_TRUE = 
DX_COND_latex_FALSE = #
DX_COND_latex_TRUE = 
DX_COND_man_FALSE = 
DX_COND_man_TRUE = #
DX_COND_pdf_FALSE = #
DX_COND_pdf_TRUE = 
DX_COND_ps_FALSE = 
DX_COND_ps_TRUE = #
DX_COND_rtf_FALSE = 
DX_COND_rtf_TRUE = #
DX_COND_xml_FALSE = 
DX_COND_xml_TRUE = #
DX_CONFIG = doc/doxygen.config
DX_DOCDIR = doc
DX_DOT = /usr/bin/dot
DX_DOXYGEN = /usr/bin/doxygen
DX_DVIPS = 
DX_EGREP = /bin/egrep
DX_ENV =  SRCDIR='.' PROJECT='Neurofitter' DOCDIR='doc' VERSION='1.0' PERL_PATH='/usr/bin/perl' HAVE_DOT='YES' DOT_PATH='/usr/bin' GENERATE_MAN='NO' GENERATE_RTF='NO' GENERATE_XML='NO' GENERATE_HTMLHELP='NO' GENERATE_CHI='NO' GENERATE_HTML='YES' GENERATE_LATEX='YES'
DX_FLAG_chi = 0
DX_FLAG_chm = 0
DX_FLAG_doc = 1
DX_FLAG_dot = 1
DX_FLAG_html = 1
DX_FLAG_man = 0
DX_FLAG_pdf = 1
DX_FLAG_ps = 0
DX_FLAG_rtf = 0
DX_FLAG_xml = 0
DX_HHC = 
DX_LATEX = 
DX_MAKEINDEX = /usr/bin/makeindex
DX_PDFLATEX = /usr/bin/pdflatex
DX_PERL = /usr/bin/perl
DX_PROJECT = Neurofitter
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EO_CFLAGS = -g -O2 $(am__append_4)
EO_CPPFLAGS = 
EO_LDFLAGS =   $(am__append_5)
EXEEXT = 
F77 = g77
FFLAGS = -g -O2
GREP = /bin/grep
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -rdynamic
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/igr/src/Neurofitter/missing --run makeinfo
MPICXX = g++
MPILIBS = 
NEUROFITTER_DEBUG_FALSE = 
NEUROFITTER_DEBUG_TRUE = #
NOMAD_CFLAGS = -g -O2 $(am__append_6)
NOMAD_CPPFLAGS = 
NOMAD_LDFLAGS =   $(am__append_7)
OBJEXT = o
PACKAGE = neurofitter
PACKAGE_BUGREPORT = 
PACKAGE_NAME = neurofitter
PACKAGE_STRING = neurofitter 1.0
PACKAGE_TARNAME = neurofitter
PACKAGE_VERSION = 1.0
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
USE_EO_FALSE = 
USE_EO_TRUE = #
USE_MPI_FALSE = 
USE_MPI_TRUE = #
USE_NOMAD_FALSE = 
USE_NOMAD_TRUE = #
VERSION = 1.0
XML2_CONFIG = /usr/bin/xml2-config
XML_CPPFLAGS = -I/usr/include/libxml2
XML_LIBS = -L/usr/lib -lxml2
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = g77
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /home/igr/src/Neurofitter/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
CLEANFILES = *~
DISTCLEANFILES = 
MAINTAINERCLEANFILES = Makefile.in
INCLUDES = -I$(top_srcdir) 
AM_CPPFLAGS = $(am__append_2)
AM_CXXFLAGS = $(am__append_1) $(am__append_3)
AM_LDFLAGS = 
AM_CFLAGS = 
SRCDIR = $(top_srcdir)/implementation
INCLUDEDIR = $(top_srcdir)
#MPINEUROFITTER = mpineurofitter
#EO_SRC = $(SRCDIR)/EOFitterInterface.cpp
#NOMAD_SRC = $(SRCDIR)/NOMADFitterInterface.cpp $(SRCDIR)/truthfunction.cpp 
##EONOMAD_SRC = $(SRCDIR)/EONOMADFitterInterface.cpp
neurofitter_SOURCES = $(SRCDIR)/Neurofitter.cpp \
 $(SRCDIR)/DataTrace.cpp \
 $(SRCDIR)/FixedParameters.cpp \
 $(SRCDIR)/NormalTracesReader.cpp \
 $(SRCDIR)/XMLString.cpp \
 $(SRCDIR)/ModelResults.cpp \
 $(SRCDIR)/GenesisModelInterface.cpp \
 $(SRCDIR)/NeuronModelInterface.cpp \
 $(SRCDIR)/ExecutableModelInterface.cpp \
 $(SRCDIR)/ModelTuningParameters.cpp \
 $(SRCDIR)/DirectVdVdtMatrix.cpp \
 $(SRCDIR)/MapVdVdtMatrix.cpp \
 $(SRCDIR)/DistanceVdVdtMatrix.cpp \
 $(SRCDIR)/MatrixFitnessCalculator.cpp \
 $(SRCDIR)/FakeExperimentInterface.cpp \
 $(SRCDIR)/FileExperimentInterface.cpp \
 $(SRCDIR)/FileFitterInterface.cpp \
 $(SRCDIR)/FitterResults.cpp \
 $(SRCDIR)/MeshFitterInterface.cpp \
 $(SRCDIR)/EasyFitterInterface.cpp \
 $(SRCDIR)/RandomFitterInterface.cpp \
 $(SRCDIR)/SwarmFitterInterface.cpp \
 $(SRCDIR)/SwarmFly.cpp \
 $(EO_SRC) \
 $(NOMAD_SRC) \
 $(EONOMAD_SRC) 

neurofitter_LDFLAGS = $(XML_LIBS) $(EO_LDFLAGS) $(NOMAD_LDFLAGS) $(AM_LDFLAGS)
neurofitter_CFLAGS = $(XML_CPPFLAGS) $(EO_CFLAGS) $(NOMAD_CFLAGS) $(AM_CFLAGS)
neurofitter_CXXFLAGS = $(neurofitter_CFLAGS) $(AM_CXXFLAGS)
mpineurofitter_SOURCES = $(neurofitter_SOURCES) \
 $(SRCDIR)/MPIModelInterface.cpp \
 $(SRCDIR)/MPIFitnessCalculator.cpp \
 $(SRCDIR)/MPIStream.cpp

mpineurofitter_LDFLAGS = $(neurofitter_LDFLAGS) $(MPILIBS)
mpineurofitter_CFLAGS = $(neurofitter_CFLAGS)
mpineurofitter_CXXFLAGS = $(neurofitter_CXXFLAGS)
pkginclude_HEADERS = $(INCLUDEDIR)/Neurofitter.h \
  $(INCLUDEDIR)/DataTrace.h \
  $(INCLUDEDIR)/FileExperimentInterface.h \
  $(INCLUDEDIR)/MersenneTwister.h \
  $(INCLUDEDIR)/NOMADFitterInterface.h \
  $(INCLUDEDIR)/DirectVdVdtMatrix.h \
  $(INCLUDEDIR)/FileFitterInterface.h \
  $(INCLUDEDIR)/MeshFitterInterface.h \
  $(INCLUDEDIR)/NormalTracesReader.h \
  $(INCLUDEDIR)/DistanceVdVdtMatrix.h \
  $(INCLUDEDIR)/FitnessCalculator.h \
  $(INCLUDEDIR)/ModelInterface.h \
  $(INCLUDEDIR)/OutputChannel.h \
  $(INCLUDEDIR)/EasyFitterInterface.h \
  $(INCLUDEDIR)/FitterInterface.h \
  $(INCLUDEDIR)/ModelResults.h \
  $(INCLUDEDIR)/RandomFitterInterface.h \
  $(INCLUDEDIR)/EODistFitness.h	\
  $(INCLUDEDIR)/FitterResults.h	\
  $(INCLUDEDIR)/ModelTuningParameters.h	\
  $(INCLUDEDIR)/SwarmFitterInterface.h \
  $(INCLUDEDIR)/EOFitnessCalculator.h \
  $(INCLUDEDIR)/FixedParameters.h \
  $(INCLUDEDIR)/MPIFitnessCalculator.h \
  $(INCLUDEDIR)/SwarmFly.h \
  $(INCLUDEDIR)/EOFitterInterface.h \
  $(INCLUDEDIR)/FixedParamObject.h \
  $(INCLUDEDIR)/MPIModelInterface.h \
  $(INCLUDEDIR)/Tools.h \
  $(INCLUDEDIR)/EONOMADFitterInterface.h \
  $(INCLUDEDIR)/GenesisModelInterface.h  \
  $(INCLUDEDIR)/MPIStream.h \
  $(INCLUDEDIR)/TracesReader.h \
  $(INCLUDEDIR)/ExecutableModelInterface.h  \
  $(INCLUDEDIR)/InputChannel.h	\
  $(INCLUDEDIR)/ExperimentInterface.h \
  $(INCLUDEDIR)/MapVdVdtMatrix.h \
  $(INCLUDEDIR)/VdVdtMatrix.h \
  $(INCLUDEDIR)/FakeExperimentInterface.h \
  $(INCLUDEDIR)/MatrixFitnessCalculator.h \
  $(INCLUDEDIR)/NeuronModelInterface.h	\
  $(INCLUDEDIR)/XMLString.h \
  $(INCLUDEDIR)/truthfunction.h

noinst_HEADERS = 
ACLOCAL_DIST = m4/ac_caolan_search_package.m4 \
	       m4/acx_mpi.m4 \
	       m4/ax_prog_doxygen.m4 \
               m4/libxml2.m4

SCRIPTS_DIST = m plotfit purkrun newpurkrun qs qsnew 
EXTRA_DIST = autogen.sh TODO $(ACLOCAL_DIST) $(SCRIPTS_DIST)
all: neurofitter_config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --gnu '; \
	      cd $(srcdir) && $(AUTOMAKE) --gnu  \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)

neurofitter_config.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/neurofitter_config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status neurofitter_config.h
$(srcdir)/neurofitter_config.h.in:  $(am__configure_deps) 
	cd $(top_srcdir) && $(AUTOHEADER)
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f neurofitter_config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
mpineurofitter$(EXEEXT): $(mpineurofitter_OBJECTS) $(mpineurofitter_DEPENDENCIES) 
	@rm -f mpineurofitter$(EXEEXT)
	$(CXXLINK) $(mpineurofitter_LDFLAGS) $(mpineurofitter_OBJECTS) $(mpineurofitter_LDADD) $(LIBS)
neurofitter$(EXEEXT): $(neurofitter_OBJECTS) $(neurofitter_DEPENDENCIES) 
	@rm -f neurofitter$(EXEEXT)
	$(CXXLINK) $(neurofitter_LDFLAGS) $(neurofitter_OBJECTS) $(neurofitter_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/mpineurofitter-DataTrace.Po
include ./$(DEPDIR)/mpineurofitter-DirectVdVdtMatrix.Po
include ./$(DEPDIR)/mpineurofitter-DistanceVdVdtMatrix.Po
include ./$(DEPDIR)/mpineurofitter-EOFitterInterface.Po
include ./$(DEPDIR)/mpineurofitter-EONOMADFitterInterface.Po
include ./$(DEPDIR)/mpineurofitter-EasyFitterInterface.Po
include ./$(DEPDIR)/mpineurofitter-ExecutableModelInterface.Po
include ./$(DEPDIR)/mpineurofitter-FakeExperimentInterface.Po
include ./$(DEPDIR)/mpineurofitter-FileExperimentInterface.Po
include ./$(DEPDIR)/mpineurofitter-FileFitterInterface.Po
include ./$(DEPDIR)/mpineurofitter-FitterResults.Po
include ./$(DEPDIR)/mpineurofitter-FixedParameters.Po
include ./$(DEPDIR)/mpineurofitter-GenesisModelInterface.Po
include ./$(DEPDIR)/mpineurofitter-MPIFitnessCalculator.Po
include ./$(DEPDIR)/mpineurofitter-MPIModelInterface.Po
include ./$(DEPDIR)/mpineurofitter-MPIStream.Po
include ./$(DEPDIR)/mpineurofitter-MapVdVdtMatrix.Po
include ./$(DEPDIR)/mpineurofitter-MatrixFitnessCalculator.Po
include ./$(DEPDIR)/mpineurofitter-MeshFitterInterface.Po
include ./$(DEPDIR)/mpineurofitter-ModelResults.Po
include ./$(DEPDIR)/mpineurofitter-ModelTuningParameters.Po
include ./$(DEPDIR)/mpineurofitter-NOMADFitterInterface.Po
include ./$(DEPDIR)/mpineurofitter-Neurofitter.Po
include ./$(DEPDIR)/mpineurofitter-NeuronModelInterface.Po
include ./$(DEPDIR)/mpineurofitter-NormalTracesReader.Po
include ./$(DEPDIR)/mpineurofitter-RandomFitterInterface.Po
include ./$(DEPDIR)/mpineurofitter-SwarmFitterInterface.Po
include ./$(DEPDIR)/mpineurofitter-SwarmFly.Po
include ./$(DEPDIR)/mpineurofitter-XMLString.Po
include ./$(DEPDIR)/mpineurofitter-truthfunction.Po
include ./$(DEPDIR)/neurofitter-DataTrace.Po
include ./$(DEPDIR)/neurofitter-DirectVdVdtMatrix.Po
include ./$(DEPDIR)/neurofitter-DistanceVdVdtMatrix.Po
include ./$(DEPDIR)/neurofitter-EOFitterInterface.Po
include ./$(DEPDIR)/neurofitter-EONOMADFitterInterface.Po
include ./$(DEPDIR)/neurofitter-EasyFitterInterface.Po
include ./$(DEPDIR)/neurofitter-ExecutableModelInterface.Po
include ./$(DEPDIR)/neurofitter-FakeExperimentInterface.Po
include ./$(DEPDIR)/neurofitter-FileExperimentInterface.Po
include ./$(DEPDIR)/neurofitter-FileFitterInterface.Po
include ./$(DEPDIR)/neurofitter-FitterResults.Po
include ./$(DEPDIR)/neurofitter-FixedParameters.Po
include ./$(DEPDIR)/neurofitter-GenesisModelInterface.Po
include ./$(DEPDIR)/neurofitter-MapVdVdtMatrix.Po
include ./$(DEPDIR)/neurofitter-MatrixFitnessCalculator.Po
include ./$(DEPDIR)/neurofitter-MeshFitterInterface.Po
include ./$(DEPDIR)/neurofitter-ModelResults.Po
include ./$(DEPDIR)/neurofitter-ModelTuningParameters.Po
include ./$(DEPDIR)/neurofitter-NOMADFitterInterface.Po
include ./$(DEPDIR)/neurofitter-Neurofitter.Po
include ./$(DEPDIR)/neurofitter-NeuronModelInterface.Po
include ./$(DEPDIR)/neurofitter-NormalTracesReader.Po
include ./$(DEPDIR)/neurofitter-RandomFitterInterface.Po
include ./$(DEPDIR)/neurofitter-SwarmFitterInterface.Po
include ./$(DEPDIR)/neurofitter-SwarmFly.Po
include ./$(DEPDIR)/neurofitter-XMLString.Po
include ./$(DEPDIR)/neurofitter-truthfunction.Po

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

mpineurofitter-Neurofitter.o: $(SRCDIR)/Neurofitter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-Neurofitter.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-Neurofitter.Tpo" -c -o mpineurofitter-Neurofitter.o `test -f '$(SRCDIR)/Neurofitter.cpp' || echo '$(srcdir)/'`$(SRCDIR)/Neurofitter.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-Neurofitter.Tpo" "$(DEPDIR)/mpineurofitter-Neurofitter.Po"; else rm -f "$(DEPDIR)/mpineurofitter-Neurofitter.Tpo"; exit 1; fi
#	source='$(SRCDIR)/Neurofitter.cpp' object='mpineurofitter-Neurofitter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-Neurofitter.o `test -f '$(SRCDIR)/Neurofitter.cpp' || echo '$(srcdir)/'`$(SRCDIR)/Neurofitter.cpp

mpineurofitter-Neurofitter.obj: $(SRCDIR)/Neurofitter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-Neurofitter.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-Neurofitter.Tpo" -c -o mpineurofitter-Neurofitter.obj `if test -f '$(SRCDIR)/Neurofitter.cpp'; then $(CYGPATH_W) '$(SRCDIR)/Neurofitter.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/Neurofitter.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-Neurofitter.Tpo" "$(DEPDIR)/mpineurofitter-Neurofitter.Po"; else rm -f "$(DEPDIR)/mpineurofitter-Neurofitter.Tpo"; exit 1; fi
#	source='$(SRCDIR)/Neurofitter.cpp' object='mpineurofitter-Neurofitter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-Neurofitter.obj `if test -f '$(SRCDIR)/Neurofitter.cpp'; then $(CYGPATH_W) '$(SRCDIR)/Neurofitter.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/Neurofitter.cpp'; fi`

mpineurofitter-DataTrace.o: $(SRCDIR)/DataTrace.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-DataTrace.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-DataTrace.Tpo" -c -o mpineurofitter-DataTrace.o `test -f '$(SRCDIR)/DataTrace.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DataTrace.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-DataTrace.Tpo" "$(DEPDIR)/mpineurofitter-DataTrace.Po"; else rm -f "$(DEPDIR)/mpineurofitter-DataTrace.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DataTrace.cpp' object='mpineurofitter-DataTrace.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-DataTrace.o `test -f '$(SRCDIR)/DataTrace.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DataTrace.cpp

mpineurofitter-DataTrace.obj: $(SRCDIR)/DataTrace.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-DataTrace.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-DataTrace.Tpo" -c -o mpineurofitter-DataTrace.obj `if test -f '$(SRCDIR)/DataTrace.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DataTrace.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DataTrace.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-DataTrace.Tpo" "$(DEPDIR)/mpineurofitter-DataTrace.Po"; else rm -f "$(DEPDIR)/mpineurofitter-DataTrace.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DataTrace.cpp' object='mpineurofitter-DataTrace.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-DataTrace.obj `if test -f '$(SRCDIR)/DataTrace.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DataTrace.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DataTrace.cpp'; fi`

mpineurofitter-FixedParameters.o: $(SRCDIR)/FixedParameters.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-FixedParameters.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-FixedParameters.Tpo" -c -o mpineurofitter-FixedParameters.o `test -f '$(SRCDIR)/FixedParameters.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FixedParameters.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-FixedParameters.Tpo" "$(DEPDIR)/mpineurofitter-FixedParameters.Po"; else rm -f "$(DEPDIR)/mpineurofitter-FixedParameters.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FixedParameters.cpp' object='mpineurofitter-FixedParameters.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-FixedParameters.o `test -f '$(SRCDIR)/FixedParameters.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FixedParameters.cpp

mpineurofitter-FixedParameters.obj: $(SRCDIR)/FixedParameters.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-FixedParameters.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-FixedParameters.Tpo" -c -o mpineurofitter-FixedParameters.obj `if test -f '$(SRCDIR)/FixedParameters.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FixedParameters.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FixedParameters.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-FixedParameters.Tpo" "$(DEPDIR)/mpineurofitter-FixedParameters.Po"; else rm -f "$(DEPDIR)/mpineurofitter-FixedParameters.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FixedParameters.cpp' object='mpineurofitter-FixedParameters.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-FixedParameters.obj `if test -f '$(SRCDIR)/FixedParameters.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FixedParameters.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FixedParameters.cpp'; fi`

mpineurofitter-NormalTracesReader.o: $(SRCDIR)/NormalTracesReader.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-NormalTracesReader.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-NormalTracesReader.Tpo" -c -o mpineurofitter-NormalTracesReader.o `test -f '$(SRCDIR)/NormalTracesReader.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NormalTracesReader.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-NormalTracesReader.Tpo" "$(DEPDIR)/mpineurofitter-NormalTracesReader.Po"; else rm -f "$(DEPDIR)/mpineurofitter-NormalTracesReader.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NormalTracesReader.cpp' object='mpineurofitter-NormalTracesReader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-NormalTracesReader.o `test -f '$(SRCDIR)/NormalTracesReader.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NormalTracesReader.cpp

mpineurofitter-NormalTracesReader.obj: $(SRCDIR)/NormalTracesReader.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-NormalTracesReader.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-NormalTracesReader.Tpo" -c -o mpineurofitter-NormalTracesReader.obj `if test -f '$(SRCDIR)/NormalTracesReader.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NormalTracesReader.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NormalTracesReader.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-NormalTracesReader.Tpo" "$(DEPDIR)/mpineurofitter-NormalTracesReader.Po"; else rm -f "$(DEPDIR)/mpineurofitter-NormalTracesReader.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NormalTracesReader.cpp' object='mpineurofitter-NormalTracesReader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-NormalTracesReader.obj `if test -f '$(SRCDIR)/NormalTracesReader.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NormalTracesReader.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NormalTracesReader.cpp'; fi`

mpineurofitter-XMLString.o: $(SRCDIR)/XMLString.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-XMLString.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-XMLString.Tpo" -c -o mpineurofitter-XMLString.o `test -f '$(SRCDIR)/XMLString.cpp' || echo '$(srcdir)/'`$(SRCDIR)/XMLString.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-XMLString.Tpo" "$(DEPDIR)/mpineurofitter-XMLString.Po"; else rm -f "$(DEPDIR)/mpineurofitter-XMLString.Tpo"; exit 1; fi
#	source='$(SRCDIR)/XMLString.cpp' object='mpineurofitter-XMLString.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-XMLString.o `test -f '$(SRCDIR)/XMLString.cpp' || echo '$(srcdir)/'`$(SRCDIR)/XMLString.cpp

mpineurofitter-XMLString.obj: $(SRCDIR)/XMLString.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-XMLString.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-XMLString.Tpo" -c -o mpineurofitter-XMLString.obj `if test -f '$(SRCDIR)/XMLString.cpp'; then $(CYGPATH_W) '$(SRCDIR)/XMLString.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/XMLString.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-XMLString.Tpo" "$(DEPDIR)/mpineurofitter-XMLString.Po"; else rm -f "$(DEPDIR)/mpineurofitter-XMLString.Tpo"; exit 1; fi
#	source='$(SRCDIR)/XMLString.cpp' object='mpineurofitter-XMLString.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-XMLString.obj `if test -f '$(SRCDIR)/XMLString.cpp'; then $(CYGPATH_W) '$(SRCDIR)/XMLString.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/XMLString.cpp'; fi`

mpineurofitter-ModelResults.o: $(SRCDIR)/ModelResults.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-ModelResults.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-ModelResults.Tpo" -c -o mpineurofitter-ModelResults.o `test -f '$(SRCDIR)/ModelResults.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ModelResults.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-ModelResults.Tpo" "$(DEPDIR)/mpineurofitter-ModelResults.Po"; else rm -f "$(DEPDIR)/mpineurofitter-ModelResults.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ModelResults.cpp' object='mpineurofitter-ModelResults.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-ModelResults.o `test -f '$(SRCDIR)/ModelResults.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ModelResults.cpp

mpineurofitter-ModelResults.obj: $(SRCDIR)/ModelResults.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-ModelResults.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-ModelResults.Tpo" -c -o mpineurofitter-ModelResults.obj `if test -f '$(SRCDIR)/ModelResults.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ModelResults.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ModelResults.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-ModelResults.Tpo" "$(DEPDIR)/mpineurofitter-ModelResults.Po"; else rm -f "$(DEPDIR)/mpineurofitter-ModelResults.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ModelResults.cpp' object='mpineurofitter-ModelResults.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-ModelResults.obj `if test -f '$(SRCDIR)/ModelResults.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ModelResults.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ModelResults.cpp'; fi`

mpineurofitter-GenesisModelInterface.o: $(SRCDIR)/GenesisModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-GenesisModelInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-GenesisModelInterface.Tpo" -c -o mpineurofitter-GenesisModelInterface.o `test -f '$(SRCDIR)/GenesisModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/GenesisModelInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-GenesisModelInterface.Tpo" "$(DEPDIR)/mpineurofitter-GenesisModelInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-GenesisModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/GenesisModelInterface.cpp' object='mpineurofitter-GenesisModelInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-GenesisModelInterface.o `test -f '$(SRCDIR)/GenesisModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/GenesisModelInterface.cpp

mpineurofitter-GenesisModelInterface.obj: $(SRCDIR)/GenesisModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-GenesisModelInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-GenesisModelInterface.Tpo" -c -o mpineurofitter-GenesisModelInterface.obj `if test -f '$(SRCDIR)/GenesisModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/GenesisModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/GenesisModelInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-GenesisModelInterface.Tpo" "$(DEPDIR)/mpineurofitter-GenesisModelInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-GenesisModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/GenesisModelInterface.cpp' object='mpineurofitter-GenesisModelInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-GenesisModelInterface.obj `if test -f '$(SRCDIR)/GenesisModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/GenesisModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/GenesisModelInterface.cpp'; fi`

mpineurofitter-NeuronModelInterface.o: $(SRCDIR)/NeuronModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-NeuronModelInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-NeuronModelInterface.Tpo" -c -o mpineurofitter-NeuronModelInterface.o `test -f '$(SRCDIR)/NeuronModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NeuronModelInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-NeuronModelInterface.Tpo" "$(DEPDIR)/mpineurofitter-NeuronModelInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-NeuronModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NeuronModelInterface.cpp' object='mpineurofitter-NeuronModelInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-NeuronModelInterface.o `test -f '$(SRCDIR)/NeuronModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NeuronModelInterface.cpp

mpineurofitter-NeuronModelInterface.obj: $(SRCDIR)/NeuronModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-NeuronModelInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-NeuronModelInterface.Tpo" -c -o mpineurofitter-NeuronModelInterface.obj `if test -f '$(SRCDIR)/NeuronModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NeuronModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NeuronModelInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-NeuronModelInterface.Tpo" "$(DEPDIR)/mpineurofitter-NeuronModelInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-NeuronModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NeuronModelInterface.cpp' object='mpineurofitter-NeuronModelInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-NeuronModelInterface.obj `if test -f '$(SRCDIR)/NeuronModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NeuronModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NeuronModelInterface.cpp'; fi`

mpineurofitter-ExecutableModelInterface.o: $(SRCDIR)/ExecutableModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-ExecutableModelInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-ExecutableModelInterface.Tpo" -c -o mpineurofitter-ExecutableModelInterface.o `test -f '$(SRCDIR)/ExecutableModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ExecutableModelInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-ExecutableModelInterface.Tpo" "$(DEPDIR)/mpineurofitter-ExecutableModelInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-ExecutableModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ExecutableModelInterface.cpp' object='mpineurofitter-ExecutableModelInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-ExecutableModelInterface.o `test -f '$(SRCDIR)/ExecutableModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ExecutableModelInterface.cpp

mpineurofitter-ExecutableModelInterface.obj: $(SRCDIR)/ExecutableModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-ExecutableModelInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-ExecutableModelInterface.Tpo" -c -o mpineurofitter-ExecutableModelInterface.obj `if test -f '$(SRCDIR)/ExecutableModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ExecutableModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ExecutableModelInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-ExecutableModelInterface.Tpo" "$(DEPDIR)/mpineurofitter-ExecutableModelInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-ExecutableModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ExecutableModelInterface.cpp' object='mpineurofitter-ExecutableModelInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-ExecutableModelInterface.obj `if test -f '$(SRCDIR)/ExecutableModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ExecutableModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ExecutableModelInterface.cpp'; fi`

mpineurofitter-ModelTuningParameters.o: $(SRCDIR)/ModelTuningParameters.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-ModelTuningParameters.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-ModelTuningParameters.Tpo" -c -o mpineurofitter-ModelTuningParameters.o `test -f '$(SRCDIR)/ModelTuningParameters.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ModelTuningParameters.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-ModelTuningParameters.Tpo" "$(DEPDIR)/mpineurofitter-ModelTuningParameters.Po"; else rm -f "$(DEPDIR)/mpineurofitter-ModelTuningParameters.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ModelTuningParameters.cpp' object='mpineurofitter-ModelTuningParameters.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-ModelTuningParameters.o `test -f '$(SRCDIR)/ModelTuningParameters.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ModelTuningParameters.cpp

mpineurofitter-ModelTuningParameters.obj: $(SRCDIR)/ModelTuningParameters.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-ModelTuningParameters.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-ModelTuningParameters.Tpo" -c -o mpineurofitter-ModelTuningParameters.obj `if test -f '$(SRCDIR)/ModelTuningParameters.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ModelTuningParameters.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ModelTuningParameters.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-ModelTuningParameters.Tpo" "$(DEPDIR)/mpineurofitter-ModelTuningParameters.Po"; else rm -f "$(DEPDIR)/mpineurofitter-ModelTuningParameters.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ModelTuningParameters.cpp' object='mpineurofitter-ModelTuningParameters.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-ModelTuningParameters.obj `if test -f '$(SRCDIR)/ModelTuningParameters.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ModelTuningParameters.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ModelTuningParameters.cpp'; fi`

mpineurofitter-DirectVdVdtMatrix.o: $(SRCDIR)/DirectVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-DirectVdVdtMatrix.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-DirectVdVdtMatrix.Tpo" -c -o mpineurofitter-DirectVdVdtMatrix.o `test -f '$(SRCDIR)/DirectVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DirectVdVdtMatrix.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-DirectVdVdtMatrix.Tpo" "$(DEPDIR)/mpineurofitter-DirectVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/mpineurofitter-DirectVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DirectVdVdtMatrix.cpp' object='mpineurofitter-DirectVdVdtMatrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-DirectVdVdtMatrix.o `test -f '$(SRCDIR)/DirectVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DirectVdVdtMatrix.cpp

mpineurofitter-DirectVdVdtMatrix.obj: $(SRCDIR)/DirectVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-DirectVdVdtMatrix.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-DirectVdVdtMatrix.Tpo" -c -o mpineurofitter-DirectVdVdtMatrix.obj `if test -f '$(SRCDIR)/DirectVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DirectVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DirectVdVdtMatrix.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-DirectVdVdtMatrix.Tpo" "$(DEPDIR)/mpineurofitter-DirectVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/mpineurofitter-DirectVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DirectVdVdtMatrix.cpp' object='mpineurofitter-DirectVdVdtMatrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-DirectVdVdtMatrix.obj `if test -f '$(SRCDIR)/DirectVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DirectVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DirectVdVdtMatrix.cpp'; fi`

mpineurofitter-MapVdVdtMatrix.o: $(SRCDIR)/MapVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MapVdVdtMatrix.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-MapVdVdtMatrix.Tpo" -c -o mpineurofitter-MapVdVdtMatrix.o `test -f '$(SRCDIR)/MapVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MapVdVdtMatrix.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-MapVdVdtMatrix.Tpo" "$(DEPDIR)/mpineurofitter-MapVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MapVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MapVdVdtMatrix.cpp' object='mpineurofitter-MapVdVdtMatrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MapVdVdtMatrix.o `test -f '$(SRCDIR)/MapVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MapVdVdtMatrix.cpp

mpineurofitter-MapVdVdtMatrix.obj: $(SRCDIR)/MapVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MapVdVdtMatrix.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-MapVdVdtMatrix.Tpo" -c -o mpineurofitter-MapVdVdtMatrix.obj `if test -f '$(SRCDIR)/MapVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MapVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MapVdVdtMatrix.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-MapVdVdtMatrix.Tpo" "$(DEPDIR)/mpineurofitter-MapVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MapVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MapVdVdtMatrix.cpp' object='mpineurofitter-MapVdVdtMatrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MapVdVdtMatrix.obj `if test -f '$(SRCDIR)/MapVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MapVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MapVdVdtMatrix.cpp'; fi`

mpineurofitter-DistanceVdVdtMatrix.o: $(SRCDIR)/DistanceVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-DistanceVdVdtMatrix.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-DistanceVdVdtMatrix.Tpo" -c -o mpineurofitter-DistanceVdVdtMatrix.o `test -f '$(SRCDIR)/DistanceVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DistanceVdVdtMatrix.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-DistanceVdVdtMatrix.Tpo" "$(DEPDIR)/mpineurofitter-DistanceVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/mpineurofitter-DistanceVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DistanceVdVdtMatrix.cpp' object='mpineurofitter-DistanceVdVdtMatrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-DistanceVdVdtMatrix.o `test -f '$(SRCDIR)/DistanceVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DistanceVdVdtMatrix.cpp

mpineurofitter-DistanceVdVdtMatrix.obj: $(SRCDIR)/DistanceVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-DistanceVdVdtMatrix.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-DistanceVdVdtMatrix.Tpo" -c -o mpineurofitter-DistanceVdVdtMatrix.obj `if test -f '$(SRCDIR)/DistanceVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DistanceVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DistanceVdVdtMatrix.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-DistanceVdVdtMatrix.Tpo" "$(DEPDIR)/mpineurofitter-DistanceVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/mpineurofitter-DistanceVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DistanceVdVdtMatrix.cpp' object='mpineurofitter-DistanceVdVdtMatrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-DistanceVdVdtMatrix.obj `if test -f '$(SRCDIR)/DistanceVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DistanceVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DistanceVdVdtMatrix.cpp'; fi`

mpineurofitter-MatrixFitnessCalculator.o: $(SRCDIR)/MatrixFitnessCalculator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MatrixFitnessCalculator.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-MatrixFitnessCalculator.Tpo" -c -o mpineurofitter-MatrixFitnessCalculator.o `test -f '$(SRCDIR)/MatrixFitnessCalculator.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MatrixFitnessCalculator.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-MatrixFitnessCalculator.Tpo" "$(DEPDIR)/mpineurofitter-MatrixFitnessCalculator.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MatrixFitnessCalculator.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MatrixFitnessCalculator.cpp' object='mpineurofitter-MatrixFitnessCalculator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MatrixFitnessCalculator.o `test -f '$(SRCDIR)/MatrixFitnessCalculator.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MatrixFitnessCalculator.cpp

mpineurofitter-MatrixFitnessCalculator.obj: $(SRCDIR)/MatrixFitnessCalculator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MatrixFitnessCalculator.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-MatrixFitnessCalculator.Tpo" -c -o mpineurofitter-MatrixFitnessCalculator.obj `if test -f '$(SRCDIR)/MatrixFitnessCalculator.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MatrixFitnessCalculator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MatrixFitnessCalculator.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-MatrixFitnessCalculator.Tpo" "$(DEPDIR)/mpineurofitter-MatrixFitnessCalculator.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MatrixFitnessCalculator.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MatrixFitnessCalculator.cpp' object='mpineurofitter-MatrixFitnessCalculator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MatrixFitnessCalculator.obj `if test -f '$(SRCDIR)/MatrixFitnessCalculator.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MatrixFitnessCalculator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MatrixFitnessCalculator.cpp'; fi`

mpineurofitter-FakeExperimentInterface.o: $(SRCDIR)/FakeExperimentInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-FakeExperimentInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-FakeExperimentInterface.Tpo" -c -o mpineurofitter-FakeExperimentInterface.o `test -f '$(SRCDIR)/FakeExperimentInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FakeExperimentInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-FakeExperimentInterface.Tpo" "$(DEPDIR)/mpineurofitter-FakeExperimentInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-FakeExperimentInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FakeExperimentInterface.cpp' object='mpineurofitter-FakeExperimentInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-FakeExperimentInterface.o `test -f '$(SRCDIR)/FakeExperimentInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FakeExperimentInterface.cpp

mpineurofitter-FakeExperimentInterface.obj: $(SRCDIR)/FakeExperimentInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-FakeExperimentInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-FakeExperimentInterface.Tpo" -c -o mpineurofitter-FakeExperimentInterface.obj `if test -f '$(SRCDIR)/FakeExperimentInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FakeExperimentInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FakeExperimentInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-FakeExperimentInterface.Tpo" "$(DEPDIR)/mpineurofitter-FakeExperimentInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-FakeExperimentInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FakeExperimentInterface.cpp' object='mpineurofitter-FakeExperimentInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-FakeExperimentInterface.obj `if test -f '$(SRCDIR)/FakeExperimentInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FakeExperimentInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FakeExperimentInterface.cpp'; fi`

mpineurofitter-FileExperimentInterface.o: $(SRCDIR)/FileExperimentInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-FileExperimentInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-FileExperimentInterface.Tpo" -c -o mpineurofitter-FileExperimentInterface.o `test -f '$(SRCDIR)/FileExperimentInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FileExperimentInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-FileExperimentInterface.Tpo" "$(DEPDIR)/mpineurofitter-FileExperimentInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-FileExperimentInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FileExperimentInterface.cpp' object='mpineurofitter-FileExperimentInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-FileExperimentInterface.o `test -f '$(SRCDIR)/FileExperimentInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FileExperimentInterface.cpp

mpineurofitter-FileExperimentInterface.obj: $(SRCDIR)/FileExperimentInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-FileExperimentInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-FileExperimentInterface.Tpo" -c -o mpineurofitter-FileExperimentInterface.obj `if test -f '$(SRCDIR)/FileExperimentInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FileExperimentInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FileExperimentInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-FileExperimentInterface.Tpo" "$(DEPDIR)/mpineurofitter-FileExperimentInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-FileExperimentInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FileExperimentInterface.cpp' object='mpineurofitter-FileExperimentInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-FileExperimentInterface.obj `if test -f '$(SRCDIR)/FileExperimentInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FileExperimentInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FileExperimentInterface.cpp'; fi`

mpineurofitter-FileFitterInterface.o: $(SRCDIR)/FileFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-FileFitterInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-FileFitterInterface.Tpo" -c -o mpineurofitter-FileFitterInterface.o `test -f '$(SRCDIR)/FileFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FileFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-FileFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-FileFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-FileFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FileFitterInterface.cpp' object='mpineurofitter-FileFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-FileFitterInterface.o `test -f '$(SRCDIR)/FileFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FileFitterInterface.cpp

mpineurofitter-FileFitterInterface.obj: $(SRCDIR)/FileFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-FileFitterInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-FileFitterInterface.Tpo" -c -o mpineurofitter-FileFitterInterface.obj `if test -f '$(SRCDIR)/FileFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FileFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FileFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-FileFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-FileFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-FileFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FileFitterInterface.cpp' object='mpineurofitter-FileFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-FileFitterInterface.obj `if test -f '$(SRCDIR)/FileFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FileFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FileFitterInterface.cpp'; fi`

mpineurofitter-FitterResults.o: $(SRCDIR)/FitterResults.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-FitterResults.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-FitterResults.Tpo" -c -o mpineurofitter-FitterResults.o `test -f '$(SRCDIR)/FitterResults.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FitterResults.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-FitterResults.Tpo" "$(DEPDIR)/mpineurofitter-FitterResults.Po"; else rm -f "$(DEPDIR)/mpineurofitter-FitterResults.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FitterResults.cpp' object='mpineurofitter-FitterResults.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-FitterResults.o `test -f '$(SRCDIR)/FitterResults.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FitterResults.cpp

mpineurofitter-FitterResults.obj: $(SRCDIR)/FitterResults.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-FitterResults.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-FitterResults.Tpo" -c -o mpineurofitter-FitterResults.obj `if test -f '$(SRCDIR)/FitterResults.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FitterResults.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FitterResults.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-FitterResults.Tpo" "$(DEPDIR)/mpineurofitter-FitterResults.Po"; else rm -f "$(DEPDIR)/mpineurofitter-FitterResults.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FitterResults.cpp' object='mpineurofitter-FitterResults.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-FitterResults.obj `if test -f '$(SRCDIR)/FitterResults.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FitterResults.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FitterResults.cpp'; fi`

mpineurofitter-MeshFitterInterface.o: $(SRCDIR)/MeshFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MeshFitterInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-MeshFitterInterface.Tpo" -c -o mpineurofitter-MeshFitterInterface.o `test -f '$(SRCDIR)/MeshFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MeshFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-MeshFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-MeshFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MeshFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MeshFitterInterface.cpp' object='mpineurofitter-MeshFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MeshFitterInterface.o `test -f '$(SRCDIR)/MeshFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MeshFitterInterface.cpp

mpineurofitter-MeshFitterInterface.obj: $(SRCDIR)/MeshFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MeshFitterInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-MeshFitterInterface.Tpo" -c -o mpineurofitter-MeshFitterInterface.obj `if test -f '$(SRCDIR)/MeshFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MeshFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MeshFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-MeshFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-MeshFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MeshFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MeshFitterInterface.cpp' object='mpineurofitter-MeshFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MeshFitterInterface.obj `if test -f '$(SRCDIR)/MeshFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MeshFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MeshFitterInterface.cpp'; fi`

mpineurofitter-EasyFitterInterface.o: $(SRCDIR)/EasyFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-EasyFitterInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-EasyFitterInterface.Tpo" -c -o mpineurofitter-EasyFitterInterface.o `test -f '$(SRCDIR)/EasyFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EasyFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-EasyFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-EasyFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-EasyFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EasyFitterInterface.cpp' object='mpineurofitter-EasyFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-EasyFitterInterface.o `test -f '$(SRCDIR)/EasyFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EasyFitterInterface.cpp

mpineurofitter-EasyFitterInterface.obj: $(SRCDIR)/EasyFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-EasyFitterInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-EasyFitterInterface.Tpo" -c -o mpineurofitter-EasyFitterInterface.obj `if test -f '$(SRCDIR)/EasyFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EasyFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EasyFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-EasyFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-EasyFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-EasyFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EasyFitterInterface.cpp' object='mpineurofitter-EasyFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-EasyFitterInterface.obj `if test -f '$(SRCDIR)/EasyFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EasyFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EasyFitterInterface.cpp'; fi`

mpineurofitter-RandomFitterInterface.o: $(SRCDIR)/RandomFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-RandomFitterInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-RandomFitterInterface.Tpo" -c -o mpineurofitter-RandomFitterInterface.o `test -f '$(SRCDIR)/RandomFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/RandomFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-RandomFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-RandomFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-RandomFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/RandomFitterInterface.cpp' object='mpineurofitter-RandomFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-RandomFitterInterface.o `test -f '$(SRCDIR)/RandomFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/RandomFitterInterface.cpp

mpineurofitter-RandomFitterInterface.obj: $(SRCDIR)/RandomFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-RandomFitterInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-RandomFitterInterface.Tpo" -c -o mpineurofitter-RandomFitterInterface.obj `if test -f '$(SRCDIR)/RandomFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/RandomFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/RandomFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-RandomFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-RandomFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-RandomFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/RandomFitterInterface.cpp' object='mpineurofitter-RandomFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-RandomFitterInterface.obj `if test -f '$(SRCDIR)/RandomFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/RandomFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/RandomFitterInterface.cpp'; fi`

mpineurofitter-SwarmFitterInterface.o: $(SRCDIR)/SwarmFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-SwarmFitterInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-SwarmFitterInterface.Tpo" -c -o mpineurofitter-SwarmFitterInterface.o `test -f '$(SRCDIR)/SwarmFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/SwarmFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-SwarmFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-SwarmFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-SwarmFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/SwarmFitterInterface.cpp' object='mpineurofitter-SwarmFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-SwarmFitterInterface.o `test -f '$(SRCDIR)/SwarmFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/SwarmFitterInterface.cpp

mpineurofitter-SwarmFitterInterface.obj: $(SRCDIR)/SwarmFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-SwarmFitterInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-SwarmFitterInterface.Tpo" -c -o mpineurofitter-SwarmFitterInterface.obj `if test -f '$(SRCDIR)/SwarmFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/SwarmFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/SwarmFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-SwarmFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-SwarmFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-SwarmFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/SwarmFitterInterface.cpp' object='mpineurofitter-SwarmFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-SwarmFitterInterface.obj `if test -f '$(SRCDIR)/SwarmFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/SwarmFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/SwarmFitterInterface.cpp'; fi`

mpineurofitter-SwarmFly.o: $(SRCDIR)/SwarmFly.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-SwarmFly.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-SwarmFly.Tpo" -c -o mpineurofitter-SwarmFly.o `test -f '$(SRCDIR)/SwarmFly.cpp' || echo '$(srcdir)/'`$(SRCDIR)/SwarmFly.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-SwarmFly.Tpo" "$(DEPDIR)/mpineurofitter-SwarmFly.Po"; else rm -f "$(DEPDIR)/mpineurofitter-SwarmFly.Tpo"; exit 1; fi
#	source='$(SRCDIR)/SwarmFly.cpp' object='mpineurofitter-SwarmFly.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-SwarmFly.o `test -f '$(SRCDIR)/SwarmFly.cpp' || echo '$(srcdir)/'`$(SRCDIR)/SwarmFly.cpp

mpineurofitter-SwarmFly.obj: $(SRCDIR)/SwarmFly.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-SwarmFly.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-SwarmFly.Tpo" -c -o mpineurofitter-SwarmFly.obj `if test -f '$(SRCDIR)/SwarmFly.cpp'; then $(CYGPATH_W) '$(SRCDIR)/SwarmFly.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/SwarmFly.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-SwarmFly.Tpo" "$(DEPDIR)/mpineurofitter-SwarmFly.Po"; else rm -f "$(DEPDIR)/mpineurofitter-SwarmFly.Tpo"; exit 1; fi
#	source='$(SRCDIR)/SwarmFly.cpp' object='mpineurofitter-SwarmFly.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-SwarmFly.obj `if test -f '$(SRCDIR)/SwarmFly.cpp'; then $(CYGPATH_W) '$(SRCDIR)/SwarmFly.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/SwarmFly.cpp'; fi`

mpineurofitter-EOFitterInterface.o: $(SRCDIR)/EOFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-EOFitterInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-EOFitterInterface.Tpo" -c -o mpineurofitter-EOFitterInterface.o `test -f '$(SRCDIR)/EOFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EOFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-EOFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-EOFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-EOFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EOFitterInterface.cpp' object='mpineurofitter-EOFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-EOFitterInterface.o `test -f '$(SRCDIR)/EOFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EOFitterInterface.cpp

mpineurofitter-EOFitterInterface.obj: $(SRCDIR)/EOFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-EOFitterInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-EOFitterInterface.Tpo" -c -o mpineurofitter-EOFitterInterface.obj `if test -f '$(SRCDIR)/EOFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EOFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EOFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-EOFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-EOFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-EOFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EOFitterInterface.cpp' object='mpineurofitter-EOFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-EOFitterInterface.obj `if test -f '$(SRCDIR)/EOFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EOFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EOFitterInterface.cpp'; fi`

mpineurofitter-NOMADFitterInterface.o: $(SRCDIR)/NOMADFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-NOMADFitterInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-NOMADFitterInterface.Tpo" -c -o mpineurofitter-NOMADFitterInterface.o `test -f '$(SRCDIR)/NOMADFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NOMADFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-NOMADFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-NOMADFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-NOMADFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NOMADFitterInterface.cpp' object='mpineurofitter-NOMADFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-NOMADFitterInterface.o `test -f '$(SRCDIR)/NOMADFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NOMADFitterInterface.cpp

mpineurofitter-NOMADFitterInterface.obj: $(SRCDIR)/NOMADFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-NOMADFitterInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-NOMADFitterInterface.Tpo" -c -o mpineurofitter-NOMADFitterInterface.obj `if test -f '$(SRCDIR)/NOMADFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NOMADFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NOMADFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-NOMADFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-NOMADFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-NOMADFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NOMADFitterInterface.cpp' object='mpineurofitter-NOMADFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-NOMADFitterInterface.obj `if test -f '$(SRCDIR)/NOMADFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NOMADFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NOMADFitterInterface.cpp'; fi`

mpineurofitter-truthfunction.o: $(SRCDIR)/truthfunction.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-truthfunction.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-truthfunction.Tpo" -c -o mpineurofitter-truthfunction.o `test -f '$(SRCDIR)/truthfunction.cpp' || echo '$(srcdir)/'`$(SRCDIR)/truthfunction.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-truthfunction.Tpo" "$(DEPDIR)/mpineurofitter-truthfunction.Po"; else rm -f "$(DEPDIR)/mpineurofitter-truthfunction.Tpo"; exit 1; fi
#	source='$(SRCDIR)/truthfunction.cpp' object='mpineurofitter-truthfunction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-truthfunction.o `test -f '$(SRCDIR)/truthfunction.cpp' || echo '$(srcdir)/'`$(SRCDIR)/truthfunction.cpp

mpineurofitter-truthfunction.obj: $(SRCDIR)/truthfunction.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-truthfunction.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-truthfunction.Tpo" -c -o mpineurofitter-truthfunction.obj `if test -f '$(SRCDIR)/truthfunction.cpp'; then $(CYGPATH_W) '$(SRCDIR)/truthfunction.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/truthfunction.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-truthfunction.Tpo" "$(DEPDIR)/mpineurofitter-truthfunction.Po"; else rm -f "$(DEPDIR)/mpineurofitter-truthfunction.Tpo"; exit 1; fi
#	source='$(SRCDIR)/truthfunction.cpp' object='mpineurofitter-truthfunction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-truthfunction.obj `if test -f '$(SRCDIR)/truthfunction.cpp'; then $(CYGPATH_W) '$(SRCDIR)/truthfunction.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/truthfunction.cpp'; fi`

mpineurofitter-EONOMADFitterInterface.o: $(SRCDIR)/EONOMADFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-EONOMADFitterInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-EONOMADFitterInterface.Tpo" -c -o mpineurofitter-EONOMADFitterInterface.o `test -f '$(SRCDIR)/EONOMADFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EONOMADFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-EONOMADFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-EONOMADFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-EONOMADFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EONOMADFitterInterface.cpp' object='mpineurofitter-EONOMADFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-EONOMADFitterInterface.o `test -f '$(SRCDIR)/EONOMADFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EONOMADFitterInterface.cpp

mpineurofitter-EONOMADFitterInterface.obj: $(SRCDIR)/EONOMADFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-EONOMADFitterInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-EONOMADFitterInterface.Tpo" -c -o mpineurofitter-EONOMADFitterInterface.obj `if test -f '$(SRCDIR)/EONOMADFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EONOMADFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EONOMADFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-EONOMADFitterInterface.Tpo" "$(DEPDIR)/mpineurofitter-EONOMADFitterInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-EONOMADFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EONOMADFitterInterface.cpp' object='mpineurofitter-EONOMADFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-EONOMADFitterInterface.obj `if test -f '$(SRCDIR)/EONOMADFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EONOMADFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EONOMADFitterInterface.cpp'; fi`

mpineurofitter-MPIModelInterface.o: $(SRCDIR)/MPIModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MPIModelInterface.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-MPIModelInterface.Tpo" -c -o mpineurofitter-MPIModelInterface.o `test -f '$(SRCDIR)/MPIModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MPIModelInterface.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-MPIModelInterface.Tpo" "$(DEPDIR)/mpineurofitter-MPIModelInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MPIModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MPIModelInterface.cpp' object='mpineurofitter-MPIModelInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MPIModelInterface.o `test -f '$(SRCDIR)/MPIModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MPIModelInterface.cpp

mpineurofitter-MPIModelInterface.obj: $(SRCDIR)/MPIModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MPIModelInterface.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-MPIModelInterface.Tpo" -c -o mpineurofitter-MPIModelInterface.obj `if test -f '$(SRCDIR)/MPIModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MPIModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MPIModelInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-MPIModelInterface.Tpo" "$(DEPDIR)/mpineurofitter-MPIModelInterface.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MPIModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MPIModelInterface.cpp' object='mpineurofitter-MPIModelInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MPIModelInterface.obj `if test -f '$(SRCDIR)/MPIModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MPIModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MPIModelInterface.cpp'; fi`

mpineurofitter-MPIFitnessCalculator.o: $(SRCDIR)/MPIFitnessCalculator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MPIFitnessCalculator.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-MPIFitnessCalculator.Tpo" -c -o mpineurofitter-MPIFitnessCalculator.o `test -f '$(SRCDIR)/MPIFitnessCalculator.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MPIFitnessCalculator.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-MPIFitnessCalculator.Tpo" "$(DEPDIR)/mpineurofitter-MPIFitnessCalculator.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MPIFitnessCalculator.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MPIFitnessCalculator.cpp' object='mpineurofitter-MPIFitnessCalculator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MPIFitnessCalculator.o `test -f '$(SRCDIR)/MPIFitnessCalculator.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MPIFitnessCalculator.cpp

mpineurofitter-MPIFitnessCalculator.obj: $(SRCDIR)/MPIFitnessCalculator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MPIFitnessCalculator.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-MPIFitnessCalculator.Tpo" -c -o mpineurofitter-MPIFitnessCalculator.obj `if test -f '$(SRCDIR)/MPIFitnessCalculator.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MPIFitnessCalculator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MPIFitnessCalculator.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-MPIFitnessCalculator.Tpo" "$(DEPDIR)/mpineurofitter-MPIFitnessCalculator.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MPIFitnessCalculator.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MPIFitnessCalculator.cpp' object='mpineurofitter-MPIFitnessCalculator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MPIFitnessCalculator.obj `if test -f '$(SRCDIR)/MPIFitnessCalculator.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MPIFitnessCalculator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MPIFitnessCalculator.cpp'; fi`

mpineurofitter-MPIStream.o: $(SRCDIR)/MPIStream.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MPIStream.o -MD -MP -MF "$(DEPDIR)/mpineurofitter-MPIStream.Tpo" -c -o mpineurofitter-MPIStream.o `test -f '$(SRCDIR)/MPIStream.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MPIStream.cpp; \
	then mv -f "$(DEPDIR)/mpineurofitter-MPIStream.Tpo" "$(DEPDIR)/mpineurofitter-MPIStream.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MPIStream.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MPIStream.cpp' object='mpineurofitter-MPIStream.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MPIStream.o `test -f '$(SRCDIR)/MPIStream.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MPIStream.cpp

mpineurofitter-MPIStream.obj: $(SRCDIR)/MPIStream.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -MT mpineurofitter-MPIStream.obj -MD -MP -MF "$(DEPDIR)/mpineurofitter-MPIStream.Tpo" -c -o mpineurofitter-MPIStream.obj `if test -f '$(SRCDIR)/MPIStream.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MPIStream.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MPIStream.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mpineurofitter-MPIStream.Tpo" "$(DEPDIR)/mpineurofitter-MPIStream.Po"; else rm -f "$(DEPDIR)/mpineurofitter-MPIStream.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MPIStream.cpp' object='mpineurofitter-MPIStream.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mpineurofitter_CXXFLAGS) $(CXXFLAGS) -c -o mpineurofitter-MPIStream.obj `if test -f '$(SRCDIR)/MPIStream.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MPIStream.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MPIStream.cpp'; fi`

neurofitter-Neurofitter.o: $(SRCDIR)/Neurofitter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-Neurofitter.o -MD -MP -MF "$(DEPDIR)/neurofitter-Neurofitter.Tpo" -c -o neurofitter-Neurofitter.o `test -f '$(SRCDIR)/Neurofitter.cpp' || echo '$(srcdir)/'`$(SRCDIR)/Neurofitter.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-Neurofitter.Tpo" "$(DEPDIR)/neurofitter-Neurofitter.Po"; else rm -f "$(DEPDIR)/neurofitter-Neurofitter.Tpo"; exit 1; fi
#	source='$(SRCDIR)/Neurofitter.cpp' object='neurofitter-Neurofitter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-Neurofitter.o `test -f '$(SRCDIR)/Neurofitter.cpp' || echo '$(srcdir)/'`$(SRCDIR)/Neurofitter.cpp

neurofitter-Neurofitter.obj: $(SRCDIR)/Neurofitter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-Neurofitter.obj -MD -MP -MF "$(DEPDIR)/neurofitter-Neurofitter.Tpo" -c -o neurofitter-Neurofitter.obj `if test -f '$(SRCDIR)/Neurofitter.cpp'; then $(CYGPATH_W) '$(SRCDIR)/Neurofitter.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/Neurofitter.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-Neurofitter.Tpo" "$(DEPDIR)/neurofitter-Neurofitter.Po"; else rm -f "$(DEPDIR)/neurofitter-Neurofitter.Tpo"; exit 1; fi
#	source='$(SRCDIR)/Neurofitter.cpp' object='neurofitter-Neurofitter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-Neurofitter.obj `if test -f '$(SRCDIR)/Neurofitter.cpp'; then $(CYGPATH_W) '$(SRCDIR)/Neurofitter.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/Neurofitter.cpp'; fi`

neurofitter-DataTrace.o: $(SRCDIR)/DataTrace.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-DataTrace.o -MD -MP -MF "$(DEPDIR)/neurofitter-DataTrace.Tpo" -c -o neurofitter-DataTrace.o `test -f '$(SRCDIR)/DataTrace.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DataTrace.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-DataTrace.Tpo" "$(DEPDIR)/neurofitter-DataTrace.Po"; else rm -f "$(DEPDIR)/neurofitter-DataTrace.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DataTrace.cpp' object='neurofitter-DataTrace.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-DataTrace.o `test -f '$(SRCDIR)/DataTrace.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DataTrace.cpp

neurofitter-DataTrace.obj: $(SRCDIR)/DataTrace.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-DataTrace.obj -MD -MP -MF "$(DEPDIR)/neurofitter-DataTrace.Tpo" -c -o neurofitter-DataTrace.obj `if test -f '$(SRCDIR)/DataTrace.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DataTrace.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DataTrace.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-DataTrace.Tpo" "$(DEPDIR)/neurofitter-DataTrace.Po"; else rm -f "$(DEPDIR)/neurofitter-DataTrace.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DataTrace.cpp' object='neurofitter-DataTrace.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-DataTrace.obj `if test -f '$(SRCDIR)/DataTrace.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DataTrace.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DataTrace.cpp'; fi`

neurofitter-FixedParameters.o: $(SRCDIR)/FixedParameters.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-FixedParameters.o -MD -MP -MF "$(DEPDIR)/neurofitter-FixedParameters.Tpo" -c -o neurofitter-FixedParameters.o `test -f '$(SRCDIR)/FixedParameters.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FixedParameters.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-FixedParameters.Tpo" "$(DEPDIR)/neurofitter-FixedParameters.Po"; else rm -f "$(DEPDIR)/neurofitter-FixedParameters.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FixedParameters.cpp' object='neurofitter-FixedParameters.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-FixedParameters.o `test -f '$(SRCDIR)/FixedParameters.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FixedParameters.cpp

neurofitter-FixedParameters.obj: $(SRCDIR)/FixedParameters.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-FixedParameters.obj -MD -MP -MF "$(DEPDIR)/neurofitter-FixedParameters.Tpo" -c -o neurofitter-FixedParameters.obj `if test -f '$(SRCDIR)/FixedParameters.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FixedParameters.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FixedParameters.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-FixedParameters.Tpo" "$(DEPDIR)/neurofitter-FixedParameters.Po"; else rm -f "$(DEPDIR)/neurofitter-FixedParameters.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FixedParameters.cpp' object='neurofitter-FixedParameters.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-FixedParameters.obj `if test -f '$(SRCDIR)/FixedParameters.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FixedParameters.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FixedParameters.cpp'; fi`

neurofitter-NormalTracesReader.o: $(SRCDIR)/NormalTracesReader.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-NormalTracesReader.o -MD -MP -MF "$(DEPDIR)/neurofitter-NormalTracesReader.Tpo" -c -o neurofitter-NormalTracesReader.o `test -f '$(SRCDIR)/NormalTracesReader.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NormalTracesReader.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-NormalTracesReader.Tpo" "$(DEPDIR)/neurofitter-NormalTracesReader.Po"; else rm -f "$(DEPDIR)/neurofitter-NormalTracesReader.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NormalTracesReader.cpp' object='neurofitter-NormalTracesReader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-NormalTracesReader.o `test -f '$(SRCDIR)/NormalTracesReader.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NormalTracesReader.cpp

neurofitter-NormalTracesReader.obj: $(SRCDIR)/NormalTracesReader.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-NormalTracesReader.obj -MD -MP -MF "$(DEPDIR)/neurofitter-NormalTracesReader.Tpo" -c -o neurofitter-NormalTracesReader.obj `if test -f '$(SRCDIR)/NormalTracesReader.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NormalTracesReader.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NormalTracesReader.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-NormalTracesReader.Tpo" "$(DEPDIR)/neurofitter-NormalTracesReader.Po"; else rm -f "$(DEPDIR)/neurofitter-NormalTracesReader.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NormalTracesReader.cpp' object='neurofitter-NormalTracesReader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-NormalTracesReader.obj `if test -f '$(SRCDIR)/NormalTracesReader.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NormalTracesReader.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NormalTracesReader.cpp'; fi`

neurofitter-XMLString.o: $(SRCDIR)/XMLString.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-XMLString.o -MD -MP -MF "$(DEPDIR)/neurofitter-XMLString.Tpo" -c -o neurofitter-XMLString.o `test -f '$(SRCDIR)/XMLString.cpp' || echo '$(srcdir)/'`$(SRCDIR)/XMLString.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-XMLString.Tpo" "$(DEPDIR)/neurofitter-XMLString.Po"; else rm -f "$(DEPDIR)/neurofitter-XMLString.Tpo"; exit 1; fi
#	source='$(SRCDIR)/XMLString.cpp' object='neurofitter-XMLString.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-XMLString.o `test -f '$(SRCDIR)/XMLString.cpp' || echo '$(srcdir)/'`$(SRCDIR)/XMLString.cpp

neurofitter-XMLString.obj: $(SRCDIR)/XMLString.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-XMLString.obj -MD -MP -MF "$(DEPDIR)/neurofitter-XMLString.Tpo" -c -o neurofitter-XMLString.obj `if test -f '$(SRCDIR)/XMLString.cpp'; then $(CYGPATH_W) '$(SRCDIR)/XMLString.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/XMLString.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-XMLString.Tpo" "$(DEPDIR)/neurofitter-XMLString.Po"; else rm -f "$(DEPDIR)/neurofitter-XMLString.Tpo"; exit 1; fi
#	source='$(SRCDIR)/XMLString.cpp' object='neurofitter-XMLString.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-XMLString.obj `if test -f '$(SRCDIR)/XMLString.cpp'; then $(CYGPATH_W) '$(SRCDIR)/XMLString.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/XMLString.cpp'; fi`

neurofitter-ModelResults.o: $(SRCDIR)/ModelResults.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-ModelResults.o -MD -MP -MF "$(DEPDIR)/neurofitter-ModelResults.Tpo" -c -o neurofitter-ModelResults.o `test -f '$(SRCDIR)/ModelResults.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ModelResults.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-ModelResults.Tpo" "$(DEPDIR)/neurofitter-ModelResults.Po"; else rm -f "$(DEPDIR)/neurofitter-ModelResults.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ModelResults.cpp' object='neurofitter-ModelResults.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-ModelResults.o `test -f '$(SRCDIR)/ModelResults.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ModelResults.cpp

neurofitter-ModelResults.obj: $(SRCDIR)/ModelResults.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-ModelResults.obj -MD -MP -MF "$(DEPDIR)/neurofitter-ModelResults.Tpo" -c -o neurofitter-ModelResults.obj `if test -f '$(SRCDIR)/ModelResults.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ModelResults.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ModelResults.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-ModelResults.Tpo" "$(DEPDIR)/neurofitter-ModelResults.Po"; else rm -f "$(DEPDIR)/neurofitter-ModelResults.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ModelResults.cpp' object='neurofitter-ModelResults.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-ModelResults.obj `if test -f '$(SRCDIR)/ModelResults.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ModelResults.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ModelResults.cpp'; fi`

neurofitter-GenesisModelInterface.o: $(SRCDIR)/GenesisModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-GenesisModelInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-GenesisModelInterface.Tpo" -c -o neurofitter-GenesisModelInterface.o `test -f '$(SRCDIR)/GenesisModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/GenesisModelInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-GenesisModelInterface.Tpo" "$(DEPDIR)/neurofitter-GenesisModelInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-GenesisModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/GenesisModelInterface.cpp' object='neurofitter-GenesisModelInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-GenesisModelInterface.o `test -f '$(SRCDIR)/GenesisModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/GenesisModelInterface.cpp

neurofitter-GenesisModelInterface.obj: $(SRCDIR)/GenesisModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-GenesisModelInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-GenesisModelInterface.Tpo" -c -o neurofitter-GenesisModelInterface.obj `if test -f '$(SRCDIR)/GenesisModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/GenesisModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/GenesisModelInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-GenesisModelInterface.Tpo" "$(DEPDIR)/neurofitter-GenesisModelInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-GenesisModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/GenesisModelInterface.cpp' object='neurofitter-GenesisModelInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-GenesisModelInterface.obj `if test -f '$(SRCDIR)/GenesisModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/GenesisModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/GenesisModelInterface.cpp'; fi`

neurofitter-NeuronModelInterface.o: $(SRCDIR)/NeuronModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-NeuronModelInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-NeuronModelInterface.Tpo" -c -o neurofitter-NeuronModelInterface.o `test -f '$(SRCDIR)/NeuronModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NeuronModelInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-NeuronModelInterface.Tpo" "$(DEPDIR)/neurofitter-NeuronModelInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-NeuronModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NeuronModelInterface.cpp' object='neurofitter-NeuronModelInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-NeuronModelInterface.o `test -f '$(SRCDIR)/NeuronModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NeuronModelInterface.cpp

neurofitter-NeuronModelInterface.obj: $(SRCDIR)/NeuronModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-NeuronModelInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-NeuronModelInterface.Tpo" -c -o neurofitter-NeuronModelInterface.obj `if test -f '$(SRCDIR)/NeuronModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NeuronModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NeuronModelInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-NeuronModelInterface.Tpo" "$(DEPDIR)/neurofitter-NeuronModelInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-NeuronModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NeuronModelInterface.cpp' object='neurofitter-NeuronModelInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-NeuronModelInterface.obj `if test -f '$(SRCDIR)/NeuronModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NeuronModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NeuronModelInterface.cpp'; fi`

neurofitter-ExecutableModelInterface.o: $(SRCDIR)/ExecutableModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-ExecutableModelInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-ExecutableModelInterface.Tpo" -c -o neurofitter-ExecutableModelInterface.o `test -f '$(SRCDIR)/ExecutableModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ExecutableModelInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-ExecutableModelInterface.Tpo" "$(DEPDIR)/neurofitter-ExecutableModelInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-ExecutableModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ExecutableModelInterface.cpp' object='neurofitter-ExecutableModelInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-ExecutableModelInterface.o `test -f '$(SRCDIR)/ExecutableModelInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ExecutableModelInterface.cpp

neurofitter-ExecutableModelInterface.obj: $(SRCDIR)/ExecutableModelInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-ExecutableModelInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-ExecutableModelInterface.Tpo" -c -o neurofitter-ExecutableModelInterface.obj `if test -f '$(SRCDIR)/ExecutableModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ExecutableModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ExecutableModelInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-ExecutableModelInterface.Tpo" "$(DEPDIR)/neurofitter-ExecutableModelInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-ExecutableModelInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ExecutableModelInterface.cpp' object='neurofitter-ExecutableModelInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-ExecutableModelInterface.obj `if test -f '$(SRCDIR)/ExecutableModelInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ExecutableModelInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ExecutableModelInterface.cpp'; fi`

neurofitter-ModelTuningParameters.o: $(SRCDIR)/ModelTuningParameters.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-ModelTuningParameters.o -MD -MP -MF "$(DEPDIR)/neurofitter-ModelTuningParameters.Tpo" -c -o neurofitter-ModelTuningParameters.o `test -f '$(SRCDIR)/ModelTuningParameters.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ModelTuningParameters.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-ModelTuningParameters.Tpo" "$(DEPDIR)/neurofitter-ModelTuningParameters.Po"; else rm -f "$(DEPDIR)/neurofitter-ModelTuningParameters.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ModelTuningParameters.cpp' object='neurofitter-ModelTuningParameters.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-ModelTuningParameters.o `test -f '$(SRCDIR)/ModelTuningParameters.cpp' || echo '$(srcdir)/'`$(SRCDIR)/ModelTuningParameters.cpp

neurofitter-ModelTuningParameters.obj: $(SRCDIR)/ModelTuningParameters.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-ModelTuningParameters.obj -MD -MP -MF "$(DEPDIR)/neurofitter-ModelTuningParameters.Tpo" -c -o neurofitter-ModelTuningParameters.obj `if test -f '$(SRCDIR)/ModelTuningParameters.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ModelTuningParameters.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ModelTuningParameters.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-ModelTuningParameters.Tpo" "$(DEPDIR)/neurofitter-ModelTuningParameters.Po"; else rm -f "$(DEPDIR)/neurofitter-ModelTuningParameters.Tpo"; exit 1; fi
#	source='$(SRCDIR)/ModelTuningParameters.cpp' object='neurofitter-ModelTuningParameters.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-ModelTuningParameters.obj `if test -f '$(SRCDIR)/ModelTuningParameters.cpp'; then $(CYGPATH_W) '$(SRCDIR)/ModelTuningParameters.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/ModelTuningParameters.cpp'; fi`

neurofitter-DirectVdVdtMatrix.o: $(SRCDIR)/DirectVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-DirectVdVdtMatrix.o -MD -MP -MF "$(DEPDIR)/neurofitter-DirectVdVdtMatrix.Tpo" -c -o neurofitter-DirectVdVdtMatrix.o `test -f '$(SRCDIR)/DirectVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DirectVdVdtMatrix.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-DirectVdVdtMatrix.Tpo" "$(DEPDIR)/neurofitter-DirectVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/neurofitter-DirectVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DirectVdVdtMatrix.cpp' object='neurofitter-DirectVdVdtMatrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-DirectVdVdtMatrix.o `test -f '$(SRCDIR)/DirectVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DirectVdVdtMatrix.cpp

neurofitter-DirectVdVdtMatrix.obj: $(SRCDIR)/DirectVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-DirectVdVdtMatrix.obj -MD -MP -MF "$(DEPDIR)/neurofitter-DirectVdVdtMatrix.Tpo" -c -o neurofitter-DirectVdVdtMatrix.obj `if test -f '$(SRCDIR)/DirectVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DirectVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DirectVdVdtMatrix.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-DirectVdVdtMatrix.Tpo" "$(DEPDIR)/neurofitter-DirectVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/neurofitter-DirectVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DirectVdVdtMatrix.cpp' object='neurofitter-DirectVdVdtMatrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-DirectVdVdtMatrix.obj `if test -f '$(SRCDIR)/DirectVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DirectVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DirectVdVdtMatrix.cpp'; fi`

neurofitter-MapVdVdtMatrix.o: $(SRCDIR)/MapVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-MapVdVdtMatrix.o -MD -MP -MF "$(DEPDIR)/neurofitter-MapVdVdtMatrix.Tpo" -c -o neurofitter-MapVdVdtMatrix.o `test -f '$(SRCDIR)/MapVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MapVdVdtMatrix.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-MapVdVdtMatrix.Tpo" "$(DEPDIR)/neurofitter-MapVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/neurofitter-MapVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MapVdVdtMatrix.cpp' object='neurofitter-MapVdVdtMatrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-MapVdVdtMatrix.o `test -f '$(SRCDIR)/MapVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MapVdVdtMatrix.cpp

neurofitter-MapVdVdtMatrix.obj: $(SRCDIR)/MapVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-MapVdVdtMatrix.obj -MD -MP -MF "$(DEPDIR)/neurofitter-MapVdVdtMatrix.Tpo" -c -o neurofitter-MapVdVdtMatrix.obj `if test -f '$(SRCDIR)/MapVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MapVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MapVdVdtMatrix.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-MapVdVdtMatrix.Tpo" "$(DEPDIR)/neurofitter-MapVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/neurofitter-MapVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MapVdVdtMatrix.cpp' object='neurofitter-MapVdVdtMatrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-MapVdVdtMatrix.obj `if test -f '$(SRCDIR)/MapVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MapVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MapVdVdtMatrix.cpp'; fi`

neurofitter-DistanceVdVdtMatrix.o: $(SRCDIR)/DistanceVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-DistanceVdVdtMatrix.o -MD -MP -MF "$(DEPDIR)/neurofitter-DistanceVdVdtMatrix.Tpo" -c -o neurofitter-DistanceVdVdtMatrix.o `test -f '$(SRCDIR)/DistanceVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DistanceVdVdtMatrix.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-DistanceVdVdtMatrix.Tpo" "$(DEPDIR)/neurofitter-DistanceVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/neurofitter-DistanceVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DistanceVdVdtMatrix.cpp' object='neurofitter-DistanceVdVdtMatrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-DistanceVdVdtMatrix.o `test -f '$(SRCDIR)/DistanceVdVdtMatrix.cpp' || echo '$(srcdir)/'`$(SRCDIR)/DistanceVdVdtMatrix.cpp

neurofitter-DistanceVdVdtMatrix.obj: $(SRCDIR)/DistanceVdVdtMatrix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-DistanceVdVdtMatrix.obj -MD -MP -MF "$(DEPDIR)/neurofitter-DistanceVdVdtMatrix.Tpo" -c -o neurofitter-DistanceVdVdtMatrix.obj `if test -f '$(SRCDIR)/DistanceVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DistanceVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DistanceVdVdtMatrix.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-DistanceVdVdtMatrix.Tpo" "$(DEPDIR)/neurofitter-DistanceVdVdtMatrix.Po"; else rm -f "$(DEPDIR)/neurofitter-DistanceVdVdtMatrix.Tpo"; exit 1; fi
#	source='$(SRCDIR)/DistanceVdVdtMatrix.cpp' object='neurofitter-DistanceVdVdtMatrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-DistanceVdVdtMatrix.obj `if test -f '$(SRCDIR)/DistanceVdVdtMatrix.cpp'; then $(CYGPATH_W) '$(SRCDIR)/DistanceVdVdtMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/DistanceVdVdtMatrix.cpp'; fi`

neurofitter-MatrixFitnessCalculator.o: $(SRCDIR)/MatrixFitnessCalculator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-MatrixFitnessCalculator.o -MD -MP -MF "$(DEPDIR)/neurofitter-MatrixFitnessCalculator.Tpo" -c -o neurofitter-MatrixFitnessCalculator.o `test -f '$(SRCDIR)/MatrixFitnessCalculator.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MatrixFitnessCalculator.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-MatrixFitnessCalculator.Tpo" "$(DEPDIR)/neurofitter-MatrixFitnessCalculator.Po"; else rm -f "$(DEPDIR)/neurofitter-MatrixFitnessCalculator.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MatrixFitnessCalculator.cpp' object='neurofitter-MatrixFitnessCalculator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-MatrixFitnessCalculator.o `test -f '$(SRCDIR)/MatrixFitnessCalculator.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MatrixFitnessCalculator.cpp

neurofitter-MatrixFitnessCalculator.obj: $(SRCDIR)/MatrixFitnessCalculator.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-MatrixFitnessCalculator.obj -MD -MP -MF "$(DEPDIR)/neurofitter-MatrixFitnessCalculator.Tpo" -c -o neurofitter-MatrixFitnessCalculator.obj `if test -f '$(SRCDIR)/MatrixFitnessCalculator.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MatrixFitnessCalculator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MatrixFitnessCalculator.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-MatrixFitnessCalculator.Tpo" "$(DEPDIR)/neurofitter-MatrixFitnessCalculator.Po"; else rm -f "$(DEPDIR)/neurofitter-MatrixFitnessCalculator.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MatrixFitnessCalculator.cpp' object='neurofitter-MatrixFitnessCalculator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-MatrixFitnessCalculator.obj `if test -f '$(SRCDIR)/MatrixFitnessCalculator.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MatrixFitnessCalculator.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MatrixFitnessCalculator.cpp'; fi`

neurofitter-FakeExperimentInterface.o: $(SRCDIR)/FakeExperimentInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-FakeExperimentInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-FakeExperimentInterface.Tpo" -c -o neurofitter-FakeExperimentInterface.o `test -f '$(SRCDIR)/FakeExperimentInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FakeExperimentInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-FakeExperimentInterface.Tpo" "$(DEPDIR)/neurofitter-FakeExperimentInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-FakeExperimentInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FakeExperimentInterface.cpp' object='neurofitter-FakeExperimentInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-FakeExperimentInterface.o `test -f '$(SRCDIR)/FakeExperimentInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FakeExperimentInterface.cpp

neurofitter-FakeExperimentInterface.obj: $(SRCDIR)/FakeExperimentInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-FakeExperimentInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-FakeExperimentInterface.Tpo" -c -o neurofitter-FakeExperimentInterface.obj `if test -f '$(SRCDIR)/FakeExperimentInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FakeExperimentInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FakeExperimentInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-FakeExperimentInterface.Tpo" "$(DEPDIR)/neurofitter-FakeExperimentInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-FakeExperimentInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FakeExperimentInterface.cpp' object='neurofitter-FakeExperimentInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-FakeExperimentInterface.obj `if test -f '$(SRCDIR)/FakeExperimentInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FakeExperimentInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FakeExperimentInterface.cpp'; fi`

neurofitter-FileExperimentInterface.o: $(SRCDIR)/FileExperimentInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-FileExperimentInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-FileExperimentInterface.Tpo" -c -o neurofitter-FileExperimentInterface.o `test -f '$(SRCDIR)/FileExperimentInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FileExperimentInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-FileExperimentInterface.Tpo" "$(DEPDIR)/neurofitter-FileExperimentInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-FileExperimentInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FileExperimentInterface.cpp' object='neurofitter-FileExperimentInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-FileExperimentInterface.o `test -f '$(SRCDIR)/FileExperimentInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FileExperimentInterface.cpp

neurofitter-FileExperimentInterface.obj: $(SRCDIR)/FileExperimentInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-FileExperimentInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-FileExperimentInterface.Tpo" -c -o neurofitter-FileExperimentInterface.obj `if test -f '$(SRCDIR)/FileExperimentInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FileExperimentInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FileExperimentInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-FileExperimentInterface.Tpo" "$(DEPDIR)/neurofitter-FileExperimentInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-FileExperimentInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FileExperimentInterface.cpp' object='neurofitter-FileExperimentInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-FileExperimentInterface.obj `if test -f '$(SRCDIR)/FileExperimentInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FileExperimentInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FileExperimentInterface.cpp'; fi`

neurofitter-FileFitterInterface.o: $(SRCDIR)/FileFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-FileFitterInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-FileFitterInterface.Tpo" -c -o neurofitter-FileFitterInterface.o `test -f '$(SRCDIR)/FileFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FileFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-FileFitterInterface.Tpo" "$(DEPDIR)/neurofitter-FileFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-FileFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FileFitterInterface.cpp' object='neurofitter-FileFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-FileFitterInterface.o `test -f '$(SRCDIR)/FileFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FileFitterInterface.cpp

neurofitter-FileFitterInterface.obj: $(SRCDIR)/FileFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-FileFitterInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-FileFitterInterface.Tpo" -c -o neurofitter-FileFitterInterface.obj `if test -f '$(SRCDIR)/FileFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FileFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FileFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-FileFitterInterface.Tpo" "$(DEPDIR)/neurofitter-FileFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-FileFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FileFitterInterface.cpp' object='neurofitter-FileFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-FileFitterInterface.obj `if test -f '$(SRCDIR)/FileFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FileFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FileFitterInterface.cpp'; fi`

neurofitter-FitterResults.o: $(SRCDIR)/FitterResults.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-FitterResults.o -MD -MP -MF "$(DEPDIR)/neurofitter-FitterResults.Tpo" -c -o neurofitter-FitterResults.o `test -f '$(SRCDIR)/FitterResults.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FitterResults.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-FitterResults.Tpo" "$(DEPDIR)/neurofitter-FitterResults.Po"; else rm -f "$(DEPDIR)/neurofitter-FitterResults.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FitterResults.cpp' object='neurofitter-FitterResults.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-FitterResults.o `test -f '$(SRCDIR)/FitterResults.cpp' || echo '$(srcdir)/'`$(SRCDIR)/FitterResults.cpp

neurofitter-FitterResults.obj: $(SRCDIR)/FitterResults.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-FitterResults.obj -MD -MP -MF "$(DEPDIR)/neurofitter-FitterResults.Tpo" -c -o neurofitter-FitterResults.obj `if test -f '$(SRCDIR)/FitterResults.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FitterResults.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FitterResults.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-FitterResults.Tpo" "$(DEPDIR)/neurofitter-FitterResults.Po"; else rm -f "$(DEPDIR)/neurofitter-FitterResults.Tpo"; exit 1; fi
#	source='$(SRCDIR)/FitterResults.cpp' object='neurofitter-FitterResults.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-FitterResults.obj `if test -f '$(SRCDIR)/FitterResults.cpp'; then $(CYGPATH_W) '$(SRCDIR)/FitterResults.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/FitterResults.cpp'; fi`

neurofitter-MeshFitterInterface.o: $(SRCDIR)/MeshFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-MeshFitterInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-MeshFitterInterface.Tpo" -c -o neurofitter-MeshFitterInterface.o `test -f '$(SRCDIR)/MeshFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MeshFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-MeshFitterInterface.Tpo" "$(DEPDIR)/neurofitter-MeshFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-MeshFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MeshFitterInterface.cpp' object='neurofitter-MeshFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-MeshFitterInterface.o `test -f '$(SRCDIR)/MeshFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/MeshFitterInterface.cpp

neurofitter-MeshFitterInterface.obj: $(SRCDIR)/MeshFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-MeshFitterInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-MeshFitterInterface.Tpo" -c -o neurofitter-MeshFitterInterface.obj `if test -f '$(SRCDIR)/MeshFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MeshFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MeshFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-MeshFitterInterface.Tpo" "$(DEPDIR)/neurofitter-MeshFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-MeshFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/MeshFitterInterface.cpp' object='neurofitter-MeshFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-MeshFitterInterface.obj `if test -f '$(SRCDIR)/MeshFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/MeshFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/MeshFitterInterface.cpp'; fi`

neurofitter-EasyFitterInterface.o: $(SRCDIR)/EasyFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-EasyFitterInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-EasyFitterInterface.Tpo" -c -o neurofitter-EasyFitterInterface.o `test -f '$(SRCDIR)/EasyFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EasyFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-EasyFitterInterface.Tpo" "$(DEPDIR)/neurofitter-EasyFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-EasyFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EasyFitterInterface.cpp' object='neurofitter-EasyFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-EasyFitterInterface.o `test -f '$(SRCDIR)/EasyFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EasyFitterInterface.cpp

neurofitter-EasyFitterInterface.obj: $(SRCDIR)/EasyFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-EasyFitterInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-EasyFitterInterface.Tpo" -c -o neurofitter-EasyFitterInterface.obj `if test -f '$(SRCDIR)/EasyFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EasyFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EasyFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-EasyFitterInterface.Tpo" "$(DEPDIR)/neurofitter-EasyFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-EasyFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EasyFitterInterface.cpp' object='neurofitter-EasyFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-EasyFitterInterface.obj `if test -f '$(SRCDIR)/EasyFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EasyFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EasyFitterInterface.cpp'; fi`

neurofitter-RandomFitterInterface.o: $(SRCDIR)/RandomFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-RandomFitterInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-RandomFitterInterface.Tpo" -c -o neurofitter-RandomFitterInterface.o `test -f '$(SRCDIR)/RandomFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/RandomFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-RandomFitterInterface.Tpo" "$(DEPDIR)/neurofitter-RandomFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-RandomFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/RandomFitterInterface.cpp' object='neurofitter-RandomFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-RandomFitterInterface.o `test -f '$(SRCDIR)/RandomFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/RandomFitterInterface.cpp

neurofitter-RandomFitterInterface.obj: $(SRCDIR)/RandomFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-RandomFitterInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-RandomFitterInterface.Tpo" -c -o neurofitter-RandomFitterInterface.obj `if test -f '$(SRCDIR)/RandomFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/RandomFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/RandomFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-RandomFitterInterface.Tpo" "$(DEPDIR)/neurofitter-RandomFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-RandomFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/RandomFitterInterface.cpp' object='neurofitter-RandomFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-RandomFitterInterface.obj `if test -f '$(SRCDIR)/RandomFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/RandomFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/RandomFitterInterface.cpp'; fi`

neurofitter-SwarmFitterInterface.o: $(SRCDIR)/SwarmFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-SwarmFitterInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-SwarmFitterInterface.Tpo" -c -o neurofitter-SwarmFitterInterface.o `test -f '$(SRCDIR)/SwarmFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/SwarmFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-SwarmFitterInterface.Tpo" "$(DEPDIR)/neurofitter-SwarmFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-SwarmFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/SwarmFitterInterface.cpp' object='neurofitter-SwarmFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-SwarmFitterInterface.o `test -f '$(SRCDIR)/SwarmFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/SwarmFitterInterface.cpp

neurofitter-SwarmFitterInterface.obj: $(SRCDIR)/SwarmFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-SwarmFitterInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-SwarmFitterInterface.Tpo" -c -o neurofitter-SwarmFitterInterface.obj `if test -f '$(SRCDIR)/SwarmFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/SwarmFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/SwarmFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-SwarmFitterInterface.Tpo" "$(DEPDIR)/neurofitter-SwarmFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-SwarmFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/SwarmFitterInterface.cpp' object='neurofitter-SwarmFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-SwarmFitterInterface.obj `if test -f '$(SRCDIR)/SwarmFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/SwarmFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/SwarmFitterInterface.cpp'; fi`

neurofitter-SwarmFly.o: $(SRCDIR)/SwarmFly.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-SwarmFly.o -MD -MP -MF "$(DEPDIR)/neurofitter-SwarmFly.Tpo" -c -o neurofitter-SwarmFly.o `test -f '$(SRCDIR)/SwarmFly.cpp' || echo '$(srcdir)/'`$(SRCDIR)/SwarmFly.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-SwarmFly.Tpo" "$(DEPDIR)/neurofitter-SwarmFly.Po"; else rm -f "$(DEPDIR)/neurofitter-SwarmFly.Tpo"; exit 1; fi
#	source='$(SRCDIR)/SwarmFly.cpp' object='neurofitter-SwarmFly.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-SwarmFly.o `test -f '$(SRCDIR)/SwarmFly.cpp' || echo '$(srcdir)/'`$(SRCDIR)/SwarmFly.cpp

neurofitter-SwarmFly.obj: $(SRCDIR)/SwarmFly.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-SwarmFly.obj -MD -MP -MF "$(DEPDIR)/neurofitter-SwarmFly.Tpo" -c -o neurofitter-SwarmFly.obj `if test -f '$(SRCDIR)/SwarmFly.cpp'; then $(CYGPATH_W) '$(SRCDIR)/SwarmFly.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/SwarmFly.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-SwarmFly.Tpo" "$(DEPDIR)/neurofitter-SwarmFly.Po"; else rm -f "$(DEPDIR)/neurofitter-SwarmFly.Tpo"; exit 1; fi
#	source='$(SRCDIR)/SwarmFly.cpp' object='neurofitter-SwarmFly.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-SwarmFly.obj `if test -f '$(SRCDIR)/SwarmFly.cpp'; then $(CYGPATH_W) '$(SRCDIR)/SwarmFly.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/SwarmFly.cpp'; fi`

neurofitter-EOFitterInterface.o: $(SRCDIR)/EOFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-EOFitterInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-EOFitterInterface.Tpo" -c -o neurofitter-EOFitterInterface.o `test -f '$(SRCDIR)/EOFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EOFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-EOFitterInterface.Tpo" "$(DEPDIR)/neurofitter-EOFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-EOFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EOFitterInterface.cpp' object='neurofitter-EOFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-EOFitterInterface.o `test -f '$(SRCDIR)/EOFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EOFitterInterface.cpp

neurofitter-EOFitterInterface.obj: $(SRCDIR)/EOFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-EOFitterInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-EOFitterInterface.Tpo" -c -o neurofitter-EOFitterInterface.obj `if test -f '$(SRCDIR)/EOFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EOFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EOFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-EOFitterInterface.Tpo" "$(DEPDIR)/neurofitter-EOFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-EOFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EOFitterInterface.cpp' object='neurofitter-EOFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-EOFitterInterface.obj `if test -f '$(SRCDIR)/EOFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EOFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EOFitterInterface.cpp'; fi`

neurofitter-NOMADFitterInterface.o: $(SRCDIR)/NOMADFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-NOMADFitterInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-NOMADFitterInterface.Tpo" -c -o neurofitter-NOMADFitterInterface.o `test -f '$(SRCDIR)/NOMADFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NOMADFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-NOMADFitterInterface.Tpo" "$(DEPDIR)/neurofitter-NOMADFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-NOMADFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NOMADFitterInterface.cpp' object='neurofitter-NOMADFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-NOMADFitterInterface.o `test -f '$(SRCDIR)/NOMADFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/NOMADFitterInterface.cpp

neurofitter-NOMADFitterInterface.obj: $(SRCDIR)/NOMADFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-NOMADFitterInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-NOMADFitterInterface.Tpo" -c -o neurofitter-NOMADFitterInterface.obj `if test -f '$(SRCDIR)/NOMADFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NOMADFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NOMADFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-NOMADFitterInterface.Tpo" "$(DEPDIR)/neurofitter-NOMADFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-NOMADFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/NOMADFitterInterface.cpp' object='neurofitter-NOMADFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-NOMADFitterInterface.obj `if test -f '$(SRCDIR)/NOMADFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/NOMADFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/NOMADFitterInterface.cpp'; fi`

neurofitter-truthfunction.o: $(SRCDIR)/truthfunction.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-truthfunction.o -MD -MP -MF "$(DEPDIR)/neurofitter-truthfunction.Tpo" -c -o neurofitter-truthfunction.o `test -f '$(SRCDIR)/truthfunction.cpp' || echo '$(srcdir)/'`$(SRCDIR)/truthfunction.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-truthfunction.Tpo" "$(DEPDIR)/neurofitter-truthfunction.Po"; else rm -f "$(DEPDIR)/neurofitter-truthfunction.Tpo"; exit 1; fi
#	source='$(SRCDIR)/truthfunction.cpp' object='neurofitter-truthfunction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-truthfunction.o `test -f '$(SRCDIR)/truthfunction.cpp' || echo '$(srcdir)/'`$(SRCDIR)/truthfunction.cpp

neurofitter-truthfunction.obj: $(SRCDIR)/truthfunction.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-truthfunction.obj -MD -MP -MF "$(DEPDIR)/neurofitter-truthfunction.Tpo" -c -o neurofitter-truthfunction.obj `if test -f '$(SRCDIR)/truthfunction.cpp'; then $(CYGPATH_W) '$(SRCDIR)/truthfunction.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/truthfunction.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-truthfunction.Tpo" "$(DEPDIR)/neurofitter-truthfunction.Po"; else rm -f "$(DEPDIR)/neurofitter-truthfunction.Tpo"; exit 1; fi
#	source='$(SRCDIR)/truthfunction.cpp' object='neurofitter-truthfunction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-truthfunction.obj `if test -f '$(SRCDIR)/truthfunction.cpp'; then $(CYGPATH_W) '$(SRCDIR)/truthfunction.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/truthfunction.cpp'; fi`

neurofitter-EONOMADFitterInterface.o: $(SRCDIR)/EONOMADFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-EONOMADFitterInterface.o -MD -MP -MF "$(DEPDIR)/neurofitter-EONOMADFitterInterface.Tpo" -c -o neurofitter-EONOMADFitterInterface.o `test -f '$(SRCDIR)/EONOMADFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EONOMADFitterInterface.cpp; \
	then mv -f "$(DEPDIR)/neurofitter-EONOMADFitterInterface.Tpo" "$(DEPDIR)/neurofitter-EONOMADFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-EONOMADFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EONOMADFitterInterface.cpp' object='neurofitter-EONOMADFitterInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-EONOMADFitterInterface.o `test -f '$(SRCDIR)/EONOMADFitterInterface.cpp' || echo '$(srcdir)/'`$(SRCDIR)/EONOMADFitterInterface.cpp

neurofitter-EONOMADFitterInterface.obj: $(SRCDIR)/EONOMADFitterInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -MT neurofitter-EONOMADFitterInterface.obj -MD -MP -MF "$(DEPDIR)/neurofitter-EONOMADFitterInterface.Tpo" -c -o neurofitter-EONOMADFitterInterface.obj `if test -f '$(SRCDIR)/EONOMADFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EONOMADFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EONOMADFitterInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/neurofitter-EONOMADFitterInterface.Tpo" "$(DEPDIR)/neurofitter-EONOMADFitterInterface.Po"; else rm -f "$(DEPDIR)/neurofitter-EONOMADFitterInterface.Tpo"; exit 1; fi
#	source='$(SRCDIR)/EONOMADFitterInterface.cpp' object='neurofitter-EONOMADFitterInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(neurofitter_CXXFLAGS) $(CXXFLAGS) -c -o neurofitter-EONOMADFitterInterface.obj `if test -f '$(SRCDIR)/EONOMADFitterInterface.cpp'; then $(CYGPATH_W) '$(SRCDIR)/EONOMADFitterInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/$(SRCDIR)/EONOMADFitterInterface.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
install-pkgincludeHEADERS: $(pkginclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(pkgincludedir)" || $(mkdir_p) "$(DESTDIR)$(pkgincludedir)"
	@list='$(pkginclude_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(pkgincludeHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(pkgincludedir)/$$f'"; \
	  $(pkgincludeHEADERS_INSTALL) "$$d$$p" "$(DESTDIR)$(pkgincludedir)/$$f"; \
	done

uninstall-pkgincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(pkginclude_HEADERS)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(pkgincludedir)/$$f'"; \
	  rm -f "$(DESTDIR)$(pkgincludedir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES) neurofitter_config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) neurofitter_config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES) neurofitter_config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) neurofitter_config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	mkdir $(distdir)
	$(mkdir_p) $(distdir)/$(INCLUDEDIR) $(distdir)/m4
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	-find $(distdir) -type d ! -perm -777 -exec chmod a+rwx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(SHELL) $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r $(distdir)
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bunzip2 -c $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && cd $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e '1{h;s/./=/g;p;x;}' -e '$${p;x;}'
distuninstallcheck:
	@cd $(distuninstallcheck_dir) \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) $(HEADERS) neurofitter_config.h
installdirs:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkgincludedir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-pkgincludeHEADERS

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am \
	uninstall-pkgincludeHEADERS

.PHONY: CTAGS GTAGS all all-am am--refresh check check-am clean \
	clean-binPROGRAMS clean-generic clean-libtool ctags dist \
	dist-all dist-bzip2 dist-gzip dist-shar dist-tarZ dist-zip \
	distcheck distclean distclean-compile distclean-generic \
	distclean-hdr distclean-libtool distclean-tags distcleancheck \
	distdir distuninstallcheck dvi dvi-am html html-am info \
	info-am install install-am install-binPROGRAMS install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-pkgincludeHEADERS \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-binPROGRAMS uninstall-info-am \
	uninstall-pkgincludeHEADERS


ACLOCAL_AMFLAGS ?= -I $(top_srcdir)/m4
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
